
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 50 00 20 71 0f 00 08 4f 10 00 08 49 10 00 08     .P. q...O...I...
 8000010:	49 10 00 08 49 10 00 08 49 10 00 08 00 00 00 00     I...I...I.......
	...
 800002c:	4f 10 00 08 4f 10 00 08 00 00 00 00 4f 10 00 08     O...O.......O...
 800003c:	65 11 00 08 49 10 00 08 49 10 00 08 49 10 00 08     e...I...I...I...
 800004c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800005c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800006c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800007c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800008c:	49 10 00 08 65 03 00 08 49 10 00 08 49 10 00 08     I...e...I...I...
 800009c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 80000ac:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 80000bc:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 80000cc:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 80000dc:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 80000ec:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 80000fc:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800010c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800011c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800012c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800013c:	49 10 00 08 49 10 00 08 49 10 00 08 49 10 00 08     I...I...I...I...
 800014c:	49 10 00 08                                         I...

08000150 <clock_setup>:
static uint8_t usbd_control_buffer[256];


/* Set STM32 to 72 MHz. */
static void clock_setup(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 8000154:	f001 f900 	bl	8001358 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
    rcc_periph_clock_enable(RCC_GPIOC);
 8000158:	f44f 7041 	mov.w	r0, #772	; 0x304
 800015c:	f001 f942 	bl	80013e4 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 8000160:	f240 3097 	movw	r0, #919	; 0x397
 8000164:	f001 f93e 	bl	80013e4 <rcc_periph_clock_enable>
	// GPIOA, AFIO clocks are handled by st_init();
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <main>:


int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af02      	add	r7, sp, #8
	/* Hardware config starts */
	clock_setup();
 8000172:	f7ff ffed 	bl	8000150 <clock_setup>
	systick_init();
 8000176:	f000 ffdb 	bl	8001130 <systick_init>
	/* Hardware config ends */

	//----------------------------------------------------------
	st_init();
 800017a:	f000 fd33 	bl	8000be4 <st_init>
	//rotating display to potrait mode
	//st_rotate_display(1);

	// Filling the display with some color
	st_fill_screen(ST_COLOR_NAVY);
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fcbe 	bl	8000b00 <st_fill_screen>

	st_draw_string_withbg(10, 200, "Tiny Monitor v1.0", ST_COLOR_CYAN, ST_COLOR_BLACK, &font_fixedsys_mono_24);
 8000184:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <main+0x48>)
 8000186:	9301      	str	r3, [sp, #4]
 8000188:	2300      	movs	r3, #0
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000190:	4a09      	ldr	r2, [pc, #36]	; (80001b8 <main+0x4c>)
 8000192:	21c8      	movs	r1, #200	; 0xc8
 8000194:	200a      	movs	r0, #10
 8000196:	f000 fb81 	bl	800089c <st_draw_string_withbg>
	st_draw_string(10, 10, "Connect USB...", 0xffff, &font_fixedsys_mono_24);
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <main+0x48>)
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001a2:	4a06      	ldr	r2, [pc, #24]	; (80001bc <main+0x50>)
 80001a4:	210a      	movs	r1, #10
 80001a6:	200a      	movs	r0, #10
 80001a8:	f000 fb5c 	bl	8000864 <st_draw_string>

	// Init USB at the end so MCU can start sending data to display as soon as USB is present
	usb_init();
 80001ac:	f000 f808 	bl	80001c0 <usb_init>

	while (1)
 80001b0:	e7fe      	b.n	80001b0 <main+0x44>
 80001b2:	bf00      	nop
 80001b4:	08003d18 	.word	0x08003d18
 80001b8:	08003d20 	.word	0x08003d20
 80001bc:	08003d34 	.word	0x08003d34

080001c0 <usb_init>:
	return 0;
}


void usb_init()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af04      	add	r7, sp, #16
    // reset USB peripheral
    rcc_periph_reset_pulse(RST_USB);
 80001c6:	f240 2017 	movw	r0, #535	; 0x217
 80001ca:	f001 f919 	bl	8001400 <rcc_periph_reset_pulse>

    // Pull USB D+ (A12) low for 80ms to trigger device reenumeration
    gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO12);
 80001ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001d2:	2200      	movs	r2, #0
 80001d4:	2101      	movs	r1, #1
 80001d6:	4816      	ldr	r0, [pc, #88]	; (8000230 <usb_init+0x70>)
 80001d8:	f000 ffd2 	bl	8001180 <gpio_set_mode>
    gpio_clear(GPIOA, GPIO12);
 80001dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e0:	4813      	ldr	r0, [pc, #76]	; (8000230 <usb_init+0x70>)
 80001e2:	f000 fffe 	bl	80011e2 <gpio_clear>
    delay(80);
 80001e6:	2050      	movs	r0, #80	; 0x50
 80001e8:	f000 ff88 	bl	80010fc <delay>

    usb_init_serial_num();
 80001ec:	f000 ff36 	bl	800105c <usb_init_serial_num>

    // create USB device
    usb_device = usbd_init(&st_usbfs_v1_usb_driver, &usb_device_desc, usb_config_descs,
 80001f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001f4:	9302      	str	r3, [sp, #8]
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <usb_init+0x74>)
 80001f8:	9301      	str	r3, [sp, #4]
 80001fa:	2304      	movs	r3, #4
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <usb_init+0x78>)
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <usb_init+0x7c>)
 8000202:	490f      	ldr	r1, [pc, #60]	; (8000240 <usb_init+0x80>)
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <usb_init+0x84>)
 8000206:	f001 f951 	bl	80014ac <usbd_init>
 800020a:	4603      	mov	r3, r0
 800020c:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <usb_init+0x88>)
 800020e:	6013      	str	r3, [r2, #0]
                           usb_desc_strings, sizeof(usb_desc_strings) / sizeof(usb_desc_strings[0]),
                           usbd_control_buffer, sizeof(usbd_control_buffer));

    // Set callback for config calls
    usbd_register_set_config_callback(usb_device, usb_set_config);
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <usb_init+0x88>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	490d      	ldr	r1, [pc, #52]	; (800024c <usb_init+0x8c>)
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fd3e 	bl	8001c98 <usbd_register_set_config_callback>
    //register_wcid_desc(usb_device);

	

    // Enable interrupt
    nvic_set_priority(NVIC_USB_LP_CAN_RX0_IRQ, 2 << 6);
 800021c:	2180      	movs	r1, #128	; 0x80
 800021e:	2014      	movs	r0, #20
 8000220:	f001 fe2c 	bl	8001e7c <nvic_set_priority>
    nvic_enable_irq(NVIC_USB_LP_CAN_RX0_IRQ);
 8000224:	2014      	movs	r0, #20
 8000226:	f001 fe1b 	bl	8001e60 <nvic_enable_irq>
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40010800 	.word	0x40010800
 8000234:	20000014 	.word	0x20000014
 8000238:	08003dac 	.word	0x08003dac
 800023c:	08003e04 	.word	0x08003e04
 8000240:	08003e14 	.word	0x08003e14
 8000244:	08003e3c 	.word	0x08003e3c
 8000248:	20000010 	.word	0x20000010
 800024c:	08000251 	.word	0x08000251

08000250 <usb_set_config>:

// Called when the host connects to the device and selects a configuration
void usb_set_config(usbd_device *usbd_dev, __attribute__((unused)) uint16_t wValue)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
    usbd_ep_setup(usbd_dev, EP_DATA_OUT, USB_ENDPOINT_ATTR_BULK, BULK_MAX_PACKET_SIZE, usb_data_received);
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <usb_set_config+0x54>)
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2340      	movs	r3, #64	; 0x40
 8000262:	2202      	movs	r2, #2
 8000264:	2101      	movs	r1, #1
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f001 f94c 	bl	8001504 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_ISOCHRONOUS, BULK_MAX_PACKET_SIZE, nullptr);
 800026c:	2300      	movs	r3, #0
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2340      	movs	r3, #64	; 0x40
 8000272:	2201      	movs	r2, #1
 8000274:	2182      	movs	r1, #130	; 0x82
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f001 f944 	bl	8001504 <usbd_ep_setup>


	usbd_register_control_callback(usb_device, 
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <usb_set_config+0x58>)
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <usb_set_config+0x5c>)
 8000282:	227f      	movs	r2, #127	; 0x7f
 8000284:	2141      	movs	r1, #65	; 0x41
 8000286:	f001 fa2b 	bl	80016e0 <usbd_register_control_callback>
		USB_REQ_TYPE_VENDOR | USB_REQ_TYPE_INTERFACE, 
		USB_REQ_TYPE_TYPE | USB_REQ_TYPE_RECIPIENT, 
		prepare_to_receive_stream);

	st_draw_string(10, 40, "USB connected. Config is set...", 0xffff, &font_fixedsys_mono_24);
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <usb_set_config+0x60>)
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000292:	4a08      	ldr	r2, [pc, #32]	; (80002b4 <usb_set_config+0x64>)
 8000294:	2128      	movs	r1, #40	; 0x28
 8000296:	200a      	movs	r0, #10
 8000298:	f000 fae4 	bl	8000864 <st_draw_string>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08000329 	.word	0x08000329
 80002a8:	20000010 	.word	0x20000010
 80002ac:	080002b9 	.word	0x080002b9
 80002b0:	08003d18 	.word	0x08003d18
 80002b4:	08003d44 	.word	0x08003d44

080002b8 <prepare_to_receive_stream>:

// Called when host sends control transfer. 
// If host sends wValue=0x88 and bRequest=0x33, we'll prepare to receive streams
static enum usbd_request_return_codes prepare_to_receive_stream(usbd_device *usbd_dev, struct usb_setup_data *req, uint8_t **buf, uint16_t *len, usbd_control_complete_callback *complete) 
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af02      	add	r7, sp, #8
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]
 80002c4:	603b      	str	r3, [r7, #0]
	if (req->bRequest == 0x33 && req->wIndex == 0 && req->wValue == 0x88) 
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	785b      	ldrb	r3, [r3, #1]
 80002ca:	2b33      	cmp	r3, #51	; 0x33
 80002cc:	d123      	bne.n	8000316 <prepare_to_receive_stream+0x5e>
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	889b      	ldrh	r3, [r3, #4]
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d11e      	bne.n	8000316 <prepare_to_receive_stream+0x5e>
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	885b      	ldrh	r3, [r3, #2]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	2b88      	cmp	r3, #136	; 0x88
 80002e0:	d119      	bne.n	8000316 <prepare_to_receive_stream+0x5e>
	{
		st_draw_string(10, 100, "Connected to host software...", 0xffff, &font_fixedsys_mono_24);
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <prepare_to_receive_stream+0x68>)
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <prepare_to_receive_stream+0x6c>)
 80002ec:	2164      	movs	r1, #100	; 0x64
 80002ee:	200a      	movs	r0, #10
 80002f0:	f000 fab8 	bl	8000864 <st_draw_string>

		// after writing string, prepare the display for drawing
		// Once we set the address window, we can fill the screen continuously without calling it again
		st_set_address_window(0, 0, 239, 239);
 80002f4:	23ef      	movs	r3, #239	; 0xef
 80002f6:	22ef      	movs	r2, #239	; 0xef
 80002f8:	2100      	movs	r1, #0
 80002fa:	2000      	movs	r0, #0
 80002fc:	f000 f83e 	bl	800037c <st_set_address_window>

		uint8_t ack_buff[1] = {0xAA}; //0xAA is the magic number that the python script is expecting
 8000300:	23aa      	movs	r3, #170	; 0xaa
 8000302:	753b      	strb	r3, [r7, #20]
		// Send host 0xAA to let know that we're ready
		usbd_ep_write_packet(usbd_dev, 0x82, ack_buff, 1);
 8000304:	f107 0214 	add.w	r2, r7, #20
 8000308:	2301      	movs	r3, #1
 800030a:	2182      	movs	r1, #130	; 0x82
 800030c:	68f8      	ldr	r0, [r7, #12]
 800030e:	f001 f919 	bl	8001544 <usbd_ep_write_packet>

		return USBD_REQ_HANDLED;
 8000312:	2301      	movs	r3, #1
 8000314:	e000      	b.n	8000318 <prepare_to_receive_stream+0x60>
	}
	return USBD_REQ_NEXT_CALLBACK;
 8000316:	2302      	movs	r3, #2
}
 8000318:	4618      	mov	r0, r3
 800031a:	3718      	adds	r7, #24
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	08003d18 	.word	0x08003d18
 8000324:	08003d64 	.word	0x08003d64

08000328 <usb_data_received>:

// Called when data has been received
void usb_data_received(__attribute__((unused)) usbd_device *usbd_dev, __attribute__((unused)) uint8_t ep)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b094      	sub	sp, #80	; 0x50
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
    // Retrieve USB data (has side effect of setting endpoint to VALID)
    uint8_t packet[BULK_MAX_PACKET_SIZE] __attribute__((aligned(4)));
    int len = usbd_ep_read_packet(usb_device, EP_DATA_OUT, packet, sizeof(packet));
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <usb_data_received+0x38>)
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	f107 020c 	add.w	r2, r7, #12
 800033c:	2340      	movs	r3, #64	; 0x40
 800033e:	2101      	movs	r1, #1
 8000340:	f001 f907 	bl	8001552 <usbd_ep_read_packet>
 8000344:	4603      	mov	r3, r0
 8000346:	64fb      	str	r3, [r7, #76]	; 0x4c

	st_fill_color_array(packet, len);
 8000348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fb71 	bl	8000a38 <st_fill_color_array>

	//usbd_ep_nak_set(usbd_dev, EP_DATA_OUT, 1);
	//usbd_ep_nak_set(usbd_dev, EP_DATA_OUT, 0);
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	; 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000010 	.word	0x20000010

08000364 <usb_lp_can_rx0_isr>:



// USB interrupt handler
void usb_lp_can_rx0_isr()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
    usbd_poll(usb_device);
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <usb_lp_can_rx0_isr+0x14>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	f001 f8c5 	bl	80014fc <usbd_poll>
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000010 	.word	0x20000010

0800037c <st_set_address_window>:
 * @param y1 start row address.
 * @param x2 end column address.
 * @param y2 end row address.
 */
void st_set_address_window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800037c:	b490      	push	{r4, r7}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	4604      	mov	r4, r0
 8000384:	4608      	mov	r0, r1
 8000386:	4611      	mov	r1, r2
 8000388:	461a      	mov	r2, r3
 800038a:	4623      	mov	r3, r4
 800038c:	80fb      	strh	r3, [r7, #6]
 800038e:	4603      	mov	r3, r0
 8000390:	80bb      	strh	r3, [r7, #4]
 8000392:	460b      	mov	r3, r1
 8000394:	807b      	strh	r3, [r7, #2]
 8000396:	4613      	mov	r3, r2
 8000398:	803b      	strh	r3, [r7, #0]
 800039a:	232a      	movs	r3, #42	; 0x2a
 800039c:	737b      	strb	r3, [r7, #13]
__attribute__((always_inline)) static inline void _st_write_command_8bit(uint8_t cmd)
{
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_ACTIVE;
	#endif
	ST_DC_CMD;
 800039e:	4b82      	ldr	r3, [pc, #520]	; (80005a8 <st_set_address_window+0x22c>)
 80003a0:	2204      	movs	r2, #4
 80003a2:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 80003a4:	4a81      	ldr	r2, [pc, #516]	; (80005ac <st_set_address_window+0x230>)
 80003a6:	7b7b      	ldrb	r3, [r7, #13]
 80003a8:	6013      	str	r3, [r2, #0]
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	bf00      	nop
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_IDLE;
	#endif
}
 80003d2:	bf00      	nop
	_st_write_command_8bit(ST7789_CASET);

	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 80003d4:	4b76      	ldr	r3, [pc, #472]	; (80005b0 <st_set_address_window+0x234>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT((uint8_t)(x1 >> 8));
 80003da:	88fb      	ldrh	r3, [r7, #6]
 80003dc:	0a1b      	lsrs	r3, r3, #8
 80003de:	b29b      	uxth	r3, r3
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b72      	ldr	r3, [pc, #456]	; (80005ac <st_set_address_window+0x230>)
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	bf00      	nop
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)x1);
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4b66      	ldr	r3, [pc, #408]	; (80005ac <st_set_address_window+0x230>)
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)(x2 >> 8));
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	0a1b      	lsrs	r3, r3, #8
 8000442:	b29b      	uxth	r3, r3
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b59      	ldr	r3, [pc, #356]	; (80005ac <st_set_address_window+0x230>)
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)x2);
 8000472:	887b      	ldrh	r3, [r7, #2]
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4b4d      	ldr	r3, [pc, #308]	; (80005ac <st_set_address_window+0x230>)
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	232b      	movs	r3, #43	; 0x2b
 80004a4:	73bb      	strb	r3, [r7, #14]
	ST_DC_CMD;
 80004a6:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <st_set_address_window+0x22c>)
 80004a8:	2204      	movs	r2, #4
 80004aa:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 80004ac:	4a3f      	ldr	r2, [pc, #252]	; (80005ac <st_set_address_window+0x230>)
 80004ae:	7bbb      	ldrb	r3, [r7, #14]
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
}
 80004da:	bf00      	nop

	_st_write_command_8bit(ST7789_RASET);
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 80004dc:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <st_set_address_window+0x234>)
 80004de:	2204      	movs	r2, #4
 80004e0:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT((uint8_t)(y1 >> 8));
 80004e2:	88bb      	ldrh	r3, [r7, #4]
 80004e4:	0a1b      	lsrs	r3, r3, #8
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b30      	ldr	r3, [pc, #192]	; (80005ac <st_set_address_window+0x230>)
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)y1);
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <st_set_address_window+0x230>)
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)(y2 >> 8));
 8000546:	883b      	ldrh	r3, [r7, #0]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <st_set_address_window+0x230>)
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)y2);
 800057a:	883b      	ldrh	r3, [r7, #0]
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <st_set_address_window+0x230>)
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	e005      	b.n	80005b4 <st_set_address_window+0x238>
 80005a8:	40010814 	.word	0x40010814
 80005ac:	4001300c 	.word	0x4001300c
 80005b0:	40010810 	.word	0x40010810
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	232c      	movs	r3, #44	; 0x2c
 80005ba:	73fb      	strb	r3, [r7, #15]
	ST_DC_CMD;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <st_set_address_window+0x280>)
 80005be:	2204      	movs	r2, #4
 80005c0:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <st_set_address_window+0x284>)
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
}
 80005f0:	bf00      	nop

	_st_write_command_8bit(ST7789_RAMWR);
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc90      	pop	{r4, r7}
 80005fa:	4770      	bx	lr
 80005fc:	40010814 	.word	0x40010814
 8000600:	4001300c 	.word	0x4001300c

08000604 <_st_render_glyph>:
/*
 * Render a character glyph on the display. Called by `_st_draw_string_main()`
 * User need NOT call it
 */
void _st_render_glyph(uint16_t x, uint16_t y, uint16_t fore_color, uint16_t back_color, const tImage *glyph, uint8_t is_bg)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b08b      	sub	sp, #44	; 0x2c
 8000608:	af00      	add	r7, sp, #0
 800060a:	4604      	mov	r4, r0
 800060c:	4608      	mov	r0, r1
 800060e:	4611      	mov	r1, r2
 8000610:	461a      	mov	r2, r3
 8000612:	4623      	mov	r3, r4
 8000614:	80fb      	strh	r3, [r7, #6]
 8000616:	4603      	mov	r3, r0
 8000618:	80bb      	strh	r3, [r7, #4]
 800061a:	460b      	mov	r3, r1
 800061c:	807b      	strh	r3, [r7, #2]
 800061e:	4613      	mov	r3, r2
 8000620:	803b      	strh	r3, [r7, #0]
	uint16_t width = 0, height = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	81fb      	strh	r3, [r7, #14]
 8000626:	2300      	movs	r3, #0
 8000628:	81bb      	strh	r3, [r7, #12]

	width = glyph->width;
 800062a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062c:	889b      	ldrh	r3, [r3, #4]
 800062e:	81fb      	strh	r3, [r7, #14]
	height = glyph->height;
 8000630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000632:	88db      	ldrh	r3, [r3, #6]
 8000634:	81bb      	strh	r3, [r7, #12]

	uint16_t temp_x = x;
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t temp_y = y;
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t mask = 0x80;
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	72fb      	strb	r3, [r7, #11]
	uint8_t bit_counter = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const uint8_t *glyph_data_ptr = (const uint8_t *)(glyph->data);
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	61fb      	str	r3, [r7, #28]
	uint8_t glyph_data = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	76fb      	strb	r3, [r7, #27]
	// font bitmaps are stored in column major order (scanned from left-to-right, not the conventional top-to-bottom)
	// as font glyphs have heigher height than width, this scanning saves some storage.
	// So, we also render in left-to-right manner.

	// Along x axis (width)
	for (int i = 0; i < width; i++)
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
 8000656:	e043      	b.n	80006e0 <_st_render_glyph+0xdc>
	{
		// Along y axis (height)
		for (int j = 0; j < height; j++)
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	e031      	b.n	80006c2 <_st_render_glyph+0xbe>
		{

			// load new data only when previous byte (or word, depends on glyph->dataSize) is completely traversed by the mask
			// bit_counter = 0 means glyph_data is completely traversed by the mask
			if (bit_counter == 0)
 800065e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000662:	2b00      	cmp	r3, #0
 8000664:	d108      	bne.n	8000678 <_st_render_glyph+0x74>
			{
				glyph_data = *glyph_data_ptr++;
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	61fa      	str	r2, [r7, #28]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	76fb      	strb	r3, [r7, #27]
				bit_counter = glyph->dataSize;
 8000670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000672:	7a1b      	ldrb	r3, [r3, #8]
 8000674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			}
			// Decrement bit counter
			bit_counter--;
 8000678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800067c:	3b01      	subs	r3, #1
 800067e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			//If pixel is blank
			if (glyph_data & mask)
 8000682:	7efa      	ldrb	r2, [r7, #27]
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	4013      	ands	r3, r2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <_st_render_glyph+0xa0>
			{
				//Has background color (not transparent bg)
				if (is_bg)
 800068e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00c      	beq.n	80006b0 <_st_render_glyph+0xac>
				{
					st_draw_pixel(temp_x, temp_y, back_color);
 8000696:	883a      	ldrh	r2, [r7, #0]
 8000698:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800069a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fa55 	bl	8000b4c <st_draw_pixel>
 80006a2:	e005      	b.n	80006b0 <_st_render_glyph+0xac>
			}

			//if pixel is not blank
			else
			{
				st_draw_pixel(temp_x, temp_y, fore_color);
 80006a4:	887a      	ldrh	r2, [r7, #2]
 80006a6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80006a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fa4e 	bl	8000b4c <st_draw_pixel>
			}

			glyph_data <<= 1;
 80006b0:	7efb      	ldrb	r3, [r7, #27]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	76fb      	strb	r3, [r7, #27]
			temp_y++;
 80006b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006b8:	3301      	adds	r3, #1
 80006ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		for (int j = 0; j < height; j++)
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	3301      	adds	r3, #1
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	89bb      	ldrh	r3, [r7, #12]
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbc9      	blt.n	800065e <_st_render_glyph+0x5a>
		}

		//New col starts. So, row is set to initial value and col is increased by one
		temp_y = y;
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		temp_x++;
 80006ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006d0:	3301      	adds	r3, #1
 80006d2:	84fb      	strh	r3, [r7, #38]	; 0x26

		//Reset the bit counter cause we're moving to next column, so we start with a new byte
		bit_counter = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < width; i++)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3301      	adds	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbb7      	blt.n	8000658 <_st_render_glyph+0x54>
	}
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	372c      	adds	r7, #44	; 0x2c
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
	...

080006f4 <_st_draw_string_main>:
 * is_bg=1 : Text will habe background color,   is_bg=0 : Text will have transparent background
 * User need NOT call it.
 */

void _st_draw_string_main(uint16_t x, uint16_t y, char *str, uint16_t fore_color, uint16_t back_color, const tFont *font, uint8_t is_bg)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	60ba      	str	r2, [r7, #8]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	81fb      	strh	r3, [r7, #14]
 8000702:	460b      	mov	r3, r1
 8000704:	81bb      	strh	r3, [r7, #12]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
	uint16_t x_temp = x;
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	83fb      	strh	r3, [r7, #30]
	uint16_t y_temp = y;
 800070e:	89bb      	ldrh	r3, [r7, #12]
 8000710:	83bb      	strh	r3, [r7, #28]

	uint8_t x_padding = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	75bb      	strb	r3, [r7, #22]
	uint8_t y_padding = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	757b      	strb	r3, [r7, #21]
	const tImage *img = NULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
	uint16_t width = 0, height = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	827b      	strh	r3, [r7, #18]
 8000722:	2300      	movs	r3, #0
 8000724:	823b      	strh	r3, [r7, #16]



	while (*str)
 8000726:	e08d      	b.n	8000844 <_st_draw_string_main+0x150>
	{
		if (*str == '\n')
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0a      	cmp	r3, #10
 800072e:	d10d      	bne.n	800074c <_st_draw_string_main+0x58>
		{
			x_temp = x;					//go to first col
 8000730:	89fb      	ldrh	r3, [r7, #14]
 8000732:	83fb      	strh	r3, [r7, #30]
			y_temp += (font->chars[0].image->height + y_padding);	//go to next row (row height = height of space)
 8000734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	88da      	ldrh	r2, [r3, #6]
 800073c:	7d7b      	ldrb	r3, [r7, #21]
 800073e:	b29b      	uxth	r3, r3
 8000740:	4413      	add	r3, r2
 8000742:	b29a      	uxth	r2, r3
 8000744:	8bbb      	ldrh	r3, [r7, #28]
 8000746:	4413      	add	r3, r2
 8000748:	83bb      	strh	r3, [r7, #28]
 800074a:	e078      	b.n	800083e <_st_draw_string_main+0x14a>
		}

		else if (*str == '\t')
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d10d      	bne.n	8000770 <_st_draw_string_main+0x7c>
		{
			x_temp += 4 * (font->chars[0].image->height + y_padding);	//Skip 4 spaces (width = width of space)
 8000754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	88db      	ldrh	r3, [r3, #6]
 800075c:	461a      	mov	r2, r3
 800075e:	7d7b      	ldrb	r3, [r7, #21]
 8000760:	4413      	add	r3, r2
 8000762:	b29b      	uxth	r3, r3
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	b29a      	uxth	r2, r3
 8000768:	8bfb      	ldrh	r3, [r7, #30]
 800076a:	4413      	add	r3, r2
 800076c:	83fb      	strh	r3, [r7, #30]
 800076e:	e066      	b.n	800083e <_st_draw_string_main+0x14a>
		}
		else
		{
			for (uint8_t i = 0; i < font->length; i++)
 8000770:	2300      	movs	r3, #0
 8000772:	75fb      	strb	r3, [r7, #23]
 8000774:	e014      	b.n	80007a0 <_st_draw_string_main+0xac>
			{
				if (font->chars[i].code == *str)
 8000776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	4293      	cmp	r3, r2
 8000788:	d107      	bne.n	800079a <_st_draw_string_main+0xa6>
				{
					img = font->chars[i].image;
 800078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4413      	add	r3, r2
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	61bb      	str	r3, [r7, #24]
					break;
 8000798:	e007      	b.n	80007aa <_st_draw_string_main+0xb6>
			for (uint8_t i = 0; i < font->length; i++)
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	3301      	adds	r3, #1
 800079e:	75fb      	strb	r3, [r7, #23]
 80007a0:	7dfa      	ldrb	r2, [r7, #23]
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbe5      	blt.n	8000776 <_st_draw_string_main+0x82>
				}
			}
			// No glyph (img) found, so return from this function
			if (img == NULL)
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d04f      	beq.n	8000850 <_st_draw_string_main+0x15c>
			{
				return;
			}

			width = img->width;
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	889b      	ldrh	r3, [r3, #4]
 80007b4:	827b      	strh	r3, [r7, #18]
			height = img->height;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	88db      	ldrh	r3, [r3, #6]
 80007ba:	823b      	strh	r3, [r7, #16]

			if(y_temp + (height + y_padding) > st_tftheight - 1)	//not enough space available at the bottom
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <_st_draw_string_main+0x168>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	8bba      	ldrh	r2, [r7, #28]
 80007c4:	8a39      	ldrh	r1, [r7, #16]
 80007c6:	7d7b      	ldrb	r3, [r7, #21]
 80007c8:	440b      	add	r3, r1
 80007ca:	4413      	add	r3, r2
 80007cc:	4298      	cmp	r0, r3
 80007ce:	dd41      	ble.n	8000854 <_st_draw_string_main+0x160>
				return;
			if (x_temp + (width + x_padding) > st_tftwidth - 1)	//not enough space available at the right side
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <_st_draw_string_main+0x16c>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	8bfa      	ldrh	r2, [r7, #30]
 80007d8:	8a79      	ldrh	r1, [r7, #18]
 80007da:	7dbb      	ldrb	r3, [r7, #22]
 80007dc:	440b      	add	r3, r1
 80007de:	4413      	add	r3, r2
 80007e0:	4298      	cmp	r0, r3
 80007e2:	dc09      	bgt.n	80007f8 <_st_draw_string_main+0x104>
			{
				x_temp = x;					//go to first col
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	83fb      	strh	r3, [r7, #30]
				y_temp += (height + y_padding);	//go to next row
 80007e8:	7d7b      	ldrb	r3, [r7, #21]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	8a3b      	ldrh	r3, [r7, #16]
 80007ee:	4413      	add	r3, r2
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	8bbb      	ldrh	r3, [r7, #28]
 80007f4:	4413      	add	r3, r2
 80007f6:	83bb      	strh	r3, [r7, #28]
			}


			if (is_bg)
 80007f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00b      	beq.n	8000818 <_st_draw_string_main+0x124>
				_st_render_glyph(x_temp, y_temp, fore_color, back_color, img, 1);
 8000800:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	8bb9      	ldrh	r1, [r7, #28]
 8000806:	8bf8      	ldrh	r0, [r7, #30]
 8000808:	2301      	movs	r3, #1
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	4623      	mov	r3, r4
 8000812:	f7ff fef7 	bl	8000604 <_st_render_glyph>
 8000816:	e00a      	b.n	800082e <_st_draw_string_main+0x13a>
			else
				_st_render_glyph(x_temp, y_temp, fore_color, back_color, img, 0);
 8000818:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800081a:	88fa      	ldrh	r2, [r7, #6]
 800081c:	8bb9      	ldrh	r1, [r7, #28]
 800081e:	8bf8      	ldrh	r0, [r7, #30]
 8000820:	2300      	movs	r3, #0
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	4623      	mov	r3, r4
 800082a:	f7ff feeb 	bl	8000604 <_st_render_glyph>
			x_temp += (width + x_padding);		//next char position
 800082e:	7dbb      	ldrb	r3, [r7, #22]
 8000830:	b29a      	uxth	r2, r3
 8000832:	8a7b      	ldrh	r3, [r7, #18]
 8000834:	4413      	add	r3, r2
 8000836:	b29a      	uxth	r2, r3
 8000838:	8bfb      	ldrh	r3, [r7, #30]
 800083a:	4413      	add	r3, r2
 800083c:	83fb      	strh	r3, [r7, #30]
		}


		str++;
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	3301      	adds	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
	while (*str)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	f47f af6d 	bne.w	8000728 <_st_draw_string_main+0x34>
 800084e:	e002      	b.n	8000856 <_st_draw_string_main+0x162>
				return;
 8000850:	bf00      	nop
 8000852:	e000      	b.n	8000856 <_st_draw_string_main+0x162>
				return;
 8000854:	bf00      	nop
	}
}
 8000856:	3724      	adds	r7, #36	; 0x24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	20000002 	.word	0x20000002
 8000860:	20000000 	.word	0x20000000

08000864 <st_draw_string>:
 * @param str pointer to the string to be drawn
 * @param color 16-bit RGB565 color of the string
 * @param font Pointer to the font of the string
 */
void st_draw_string(uint16_t x, uint16_t y, char *str, uint16_t color, const tFont *font)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af04      	add	r7, sp, #16
 800086a:	60ba      	str	r2, [r7, #8]
 800086c:	461a      	mov	r2, r3
 800086e:	4603      	mov	r3, r0
 8000870:	81fb      	strh	r3, [r7, #14]
 8000872:	460b      	mov	r3, r1
 8000874:	81bb      	strh	r3, [r7, #12]
 8000876:	4613      	mov	r3, r2
 8000878:	80fb      	strh	r3, [r7, #6]
	_st_draw_string_main(x, y, str, color, 0, font, 0);
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	89b9      	ldrh	r1, [r7, #12]
 800087e:	89f8      	ldrh	r0, [r7, #14]
 8000880:	2300      	movs	r3, #0
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2300      	movs	r3, #0
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4613      	mov	r3, r2
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f7ff ff30 	bl	80006f4 <_st_draw_string_main>
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <st_draw_string_withbg>:
 * @param foe_color 16-bit RGB565 color of the string
 * @param back_color 16-bit RGB565 color of the string's background
 * @param font Pointer to the font of the string
 */
void st_draw_string_withbg(uint16_t x, uint16_t y, char *str, uint16_t fore_color, uint16_t back_color, const tFont *font)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	60ba      	str	r2, [r7, #8]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4603      	mov	r3, r0
 80008a8:	81fb      	strh	r3, [r7, #14]
 80008aa:	460b      	mov	r3, r1
 80008ac:	81bb      	strh	r3, [r7, #12]
 80008ae:	4613      	mov	r3, r2
 80008b0:	80fb      	strh	r3, [r7, #6]
	_st_draw_string_main(x, y, str, fore_color, back_color, font, 1);
 80008b2:	88fa      	ldrh	r2, [r7, #6]
 80008b4:	89b9      	ldrh	r1, [r7, #12]
 80008b6:	89f8      	ldrh	r0, [r7, #14]
 80008b8:	2301      	movs	r3, #1
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	8b3b      	ldrh	r3, [r7, #24]
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	4613      	mov	r3, r2
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f7ff ff14 	bl	80006f4 <_st_draw_string_main>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <st_fill_color>:
 * @param color 16-bit RGB565 color value
 * @param len 32-bit number of pixels
 */

void st_fill_color(uint16_t color, uint32_t len)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b0c9      	sub	sp, #292	; 0x124
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4602      	mov	r2, r0
 80008dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008e4:	6019      	str	r1, [r3, #0]
 80008e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008ea:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80008ee:	801a      	strh	r2, [r3, #0]
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <st_fill_color+0x14c>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	601a      	str	r2, [r3, #0]
	uint8_t color_high = color >> 8;
 80008f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008fa:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	b29b      	uxth	r3, r3
 8000904:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	uint8_t color_low = color;
 8000908:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800090c:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

	#ifdef ST_USE_SPI_DMA		
		uint8_t disp_buffer[ST_BUFFER_SIZE_BYTES];
		for (uint16_t i = 0; i < ST_BUFFER_SIZE_BYTES; i = i+2)
 8000916:	2300      	movs	r3, #0
 8000918:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 800091c:	e017      	b.n	800094e <st_fill_color+0x7a>
		{
			disp_buffer[i] = color_high;
 800091e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8000922:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000926:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800092a:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 800092e:	54d1      	strb	r1, [r2, r3]
			disp_buffer[i + 1] = color_low;
 8000930:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8000934:	3301      	adds	r3, #1
 8000936:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800093a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800093e:	f897 1114 	ldrb.w	r1, [r7, #276]	; 0x114
 8000942:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < ST_BUFFER_SIZE_BYTES; i = i+2)
 8000944:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8000948:	3302      	adds	r3, #2
 800094a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 800094e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8000952:	2bff      	cmp	r3, #255	; 0xff
 8000954:	d9e3      	bls.n	800091e <st_fill_color+0x4a>
		}

		// len is pixel count. But each pixel is 2 bytes. So, multiply by 2
		uint32_t bytes_to_write = len * 2;
 8000956:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800095a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		uint16_t transfer_size = ST_BUFFER_SIZE_BYTES;
 8000966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
		while (bytes_to_write)
 800096e:	e04b      	b.n	8000a08 <st_fill_color+0x134>
		{
			transfer_size = (bytes_to_write < transfer_size) ? bytes_to_write : transfer_size;
 8000970:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8000974:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000978:	4293      	cmp	r3, r2
 800097a:	bf28      	it	cs
 800097c:	4613      	movcs	r3, r2
 800097e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800098a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800098e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		DMA_CMAR(ST_DMA, ST_DMA_CHANNEL) = (uint32_t)data_addr;
 8000992:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <st_fill_color+0x150>)
 8000994:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000998:	6013      	str	r3, [r2, #0]
		DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL) = length;
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <st_fill_color+0x154>)
 800099c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80009a0:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) |= DMA_CCR_EN;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <st_fill_color+0x158>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <st_fill_color+0x158>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6013      	str	r3, [r2, #0]
		SPI_CR2(ST_SPI) |= SPI_CR2_TXDMAEN;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <st_fill_color+0x15c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <st_fill_color+0x15c>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6013      	str	r3, [r2, #0]
		while (DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL));
 80009ba:	bf00      	nop
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <st_fill_color+0x154>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1fb      	bne.n	80009bc <st_fill_color+0xe8>
		while (!(SPI_SR(ST_SPI) & SPI_SR_TXE));
 80009c4:	bf00      	nop
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <st_fill_color+0x160>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f9      	beq.n	80009c6 <st_fill_color+0xf2>
		while (SPI_SR(ST_SPI) & SPI_SR_BSY);
 80009d2:	bf00      	nop
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <st_fill_color+0x160>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1f9      	bne.n	80009d4 <st_fill_color+0x100>
		SPI_CR2(ST_SPI) &= ~SPI_CR2_TXDMAEN;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <st_fill_color+0x15c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <st_fill_color+0x15c>)
 80009e6:	f023 0302 	bic.w	r3, r3, #2
 80009ea:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) &= ~DMA_CCR_EN;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <st_fill_color+0x158>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <st_fill_color+0x158>)
 80009f2:	f023 0301 	bic.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]
	}
 80009f8:	bf00      	nop
			_st_write_spi_dma(disp_buffer, transfer_size);
			bytes_to_write -= transfer_size;
 80009fa:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80009fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		while (bytes_to_write)
 8000a08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1af      	bne.n	8000970 <st_fill_color+0x9c>
	#endif

	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_IDLE;
	#endif
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40010810 	.word	0x40010810
 8000a24:	4002003c 	.word	0x4002003c
 8000a28:	40020034 	.word	0x40020034
 8000a2c:	40020030 	.word	0x40020030
 8000a30:	40013004 	.word	0x40013004
 8000a34:	40013008 	.word	0x40013008

08000a38 <st_fill_color_array>:
 * @param color_arr pointer to uint8_t array. Each 16-bit color is seperated into two 8-bit `high` and `low` components
 * @param bytes 32-bit number of bytes in the array (= no. of pixels x2)
 */

void st_fill_color_array(uint8_t *color_arr, uint32_t bytes)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <st_fill_color_array+0xb0>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	601a      	str	r2, [r3, #0]

	#ifdef ST_USE_SPI_DMA		
	
		// len is pixel count. But each pixel is 2 bytes. So, multiply by 2
		uint32_t bytes_to_write = bytes;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	617b      	str	r3, [r7, #20]
		uint16_t transfer_size = ST_BUFFER_SIZE_BYTES;
 8000a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a50:	827b      	strh	r3, [r7, #18]
		while (bytes_to_write)
 8000a52:	e03f      	b.n	8000ad4 <st_fill_color_array+0x9c>
		{
			transfer_size = (bytes_to_write < transfer_size) ? bytes_to_write : transfer_size;
 8000a54:	8a7a      	ldrh	r2, [r7, #18]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	bf28      	it	cs
 8000a5c:	4613      	movcs	r3, r2
 8000a5e:	827b      	strh	r3, [r7, #18]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	8a7b      	ldrh	r3, [r7, #18]
 8000a66:	817b      	strh	r3, [r7, #10]
		DMA_CMAR(ST_DMA, ST_DMA_CHANNEL) = (uint32_t)data_addr;
 8000a68:	4a20      	ldr	r2, [pc, #128]	; (8000aec <st_fill_color_array+0xb4>)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6013      	str	r3, [r2, #0]
		DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL) = length;
 8000a6e:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <st_fill_color_array+0xb8>)
 8000a70:	897b      	ldrh	r3, [r7, #10]
 8000a72:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) |= DMA_CCR_EN;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <st_fill_color_array+0xbc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <st_fill_color_array+0xbc>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6013      	str	r3, [r2, #0]
		SPI_CR2(ST_SPI) |= SPI_CR2_TXDMAEN;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <st_fill_color_array+0xc0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <st_fill_color_array+0xc0>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	6013      	str	r3, [r2, #0]
		while (DMA_CNDTR(ST_DMA, ST_DMA_CHANNEL));
 8000a8c:	bf00      	nop
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <st_fill_color_array+0xb8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1fb      	bne.n	8000a8e <st_fill_color_array+0x56>
		while (!(SPI_SR(ST_SPI) & SPI_SR_TXE));
 8000a96:	bf00      	nop
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <st_fill_color_array+0xc4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f9      	beq.n	8000a98 <st_fill_color_array+0x60>
		while (SPI_SR(ST_SPI) & SPI_SR_BSY);
 8000aa4:	bf00      	nop
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <st_fill_color_array+0xc4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f9      	bne.n	8000aa6 <st_fill_color_array+0x6e>
		SPI_CR2(ST_SPI) &= ~SPI_CR2_TXDMAEN;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <st_fill_color_array+0xc0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <st_fill_color_array+0xc0>)
 8000ab8:	f023 0302 	bic.w	r3, r3, #2
 8000abc:	6013      	str	r3, [r2, #0]
		DMA_CCR(ST_DMA, ST_DMA_CHANNEL) &= ~DMA_CCR_EN;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <st_fill_color_array+0xbc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <st_fill_color_array+0xbc>)
 8000ac4:	f023 0301 	bic.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]
	}
 8000aca:	bf00      	nop
			_st_write_spi_dma(color_arr, transfer_size);
			bytes_to_write -= transfer_size;
 8000acc:	8a7b      	ldrh	r3, [r7, #18]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
		while (bytes_to_write)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1bc      	bne.n	8000a54 <st_fill_color_array+0x1c>
	#endif

	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_IDLE;
	#endif
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40010810 	.word	0x40010810
 8000aec:	4002003c 	.word	0x4002003c
 8000af0:	40020034 	.word	0x40020034
 8000af4:	40020030 	.word	0x40020030
 8000af8:	40013004 	.word	0x40013004
 8000afc:	40013008 	.word	0x40013008

08000b00 <st_fill_screen>:
/**
 * Fill the entire display (screen) with `color`
 * @param color 16-bit RGB565 color
 */
void st_fill_screen(uint16_t color)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
	st_set_address_window(0, 0, st_tftwidth - 1, st_tftheight - 1);
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <st_fill_screen+0x44>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <st_fill_screen+0x48>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fc2d 	bl	800037c <st_set_address_window>
	st_fill_color(color, (uint32_t)st_tftwidth * (uint32_t)st_tftheight);
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <st_fill_screen+0x44>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <st_fill_screen+0x48>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	fb03 f202 	mul.w	r2, r3, r2
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fecd 	bl	80008d4 <st_fill_color>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000002 	.word	0x20000002

08000b4c <st_draw_pixel>:
 * Draw a pixel at a given position with `color`
 * @param x Start col address
 * @param y Start row address
 */
void st_draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	460b      	mov	r3, r1
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	807b      	strh	r3, [r7, #2]
	/*
	* Why?: This function is mainly added in the driver so that  ui libraries can use it.
	* example: LittlevGL requires user to supply a function that can draw pixel
	*/

	st_set_address_window(x, y, x, y);
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	88b9      	ldrh	r1, [r7, #4]
 8000b64:	88f8      	ldrh	r0, [r7, #6]
 8000b66:	f7ff fc09 	bl	800037c <st_set_address_window>
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_ACTIVE;
	#endif
	ST_DC_DAT;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <st_draw_pixel+0x90>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT((uint8_t)(color >> 8));
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <st_draw_pixel+0x94>)
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
	ST_WRITE_8BIT((uint8_t)color);
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <st_draw_pixel+0x94>)
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
	#ifdef ST_RELEASE_WHEN_IDLE
		ST_CS_IDLE;
	#endif
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010810 	.word	0x40010810
 8000be0:	4001300c 	.word	0x4001300c

08000be4 <st_init>:

/**
 * Initialize the display driver
 */
void st_init()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
	// Set gpio clock
	ST_CONFIG_GPIO_CLOCK();
 8000bea:	f240 3002 	movw	r0, #770	; 0x302
 8000bee:	f000 fbf9 	bl	80013e4 <rcc_periph_clock_enable>
 8000bf2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000bf6:	f000 fbf5 	bl	80013e4 <rcc_periph_clock_enable>
 8000bfa:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8000bfe:	f000 fbf1 	bl	80013e4 <rcc_periph_clock_enable>
 8000c02:	f44f 7020 	mov.w	r0, #640	; 0x280
 8000c06:	f000 fbed 	bl	80013e4 <rcc_periph_clock_enable>
	// Configure gpio output dir and mode
	ST_CONFIG_GPIO();
 8000c0a:	23a0      	movs	r3, #160	; 0xa0
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	2103      	movs	r1, #3
 8000c10:	4893      	ldr	r0, [pc, #588]	; (8000e60 <st_init+0x27c>)
 8000c12:	f000 fab5 	bl	8001180 <gpio_set_mode>
 8000c16:	231c      	movs	r3, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	4890      	ldr	r0, [pc, #576]	; (8000e60 <st_init+0x27c>)
 8000c1e:	f000 faaf 	bl	8001180 <gpio_set_mode>
 8000c22:	211c      	movs	r1, #28
 8000c24:	488e      	ldr	r0, [pc, #568]	; (8000e60 <st_init+0x27c>)
 8000c26:	f000 fada 	bl	80011de <gpio_set>
 8000c2a:	4b8e      	ldr	r3, [pc, #568]	; (8000e64 <st_init+0x280>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a8d      	ldr	r2, [pc, #564]	; (8000e64 <st_init+0x280>)
 8000c30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c34:	6013      	str	r3, [r2, #0]
	// If using DMA, config SPI DMA
	#ifdef ST_USE_SPI_DMA
		ST_CONFIG_SPI_DMA();
 8000c36:	4b8c      	ldr	r3, [pc, #560]	; (8000e68 <st_init+0x284>)
 8000c38:	4a8c      	ldr	r2, [pc, #560]	; (8000e6c <st_init+0x288>)
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	4b8c      	ldr	r3, [pc, #560]	; (8000e70 <st_init+0x28c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	4b8c      	ldr	r3, [pc, #560]	; (8000e74 <st_init+0x290>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	4b8b      	ldr	r3, [pc, #556]	; (8000e78 <st_init+0x294>)
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	4b89      	ldr	r3, [pc, #548]	; (8000e78 <st_init+0x294>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a88      	ldr	r2, [pc, #544]	; (8000e78 <st_init+0x294>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b86      	ldr	r3, [pc, #536]	; (8000e78 <st_init+0x294>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a85      	ldr	r2, [pc, #532]	; (8000e78 <st_init+0x294>)
 8000c62:	f023 0320 	bic.w	r3, r3, #32
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b83      	ldr	r3, [pc, #524]	; (8000e78 <st_init+0x294>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a82      	ldr	r2, [pc, #520]	; (8000e78 <st_init+0x294>)
 8000c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b80      	ldr	r3, [pc, #512]	; (8000e78 <st_init+0x294>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a7f      	ldr	r2, [pc, #508]	; (8000e78 <st_init+0x294>)
 8000c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b7d      	ldr	r3, [pc, #500]	; (8000e78 <st_init+0x294>)
 8000c82:	4a7d      	ldr	r2, [pc, #500]	; (8000e78 <st_init+0x294>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6013      	str	r3, [r2, #0]
	#endif
	// Configure SPI settings
	ST_CONFIG_SPI();
 8000c88:	487c      	ldr	r0, [pc, #496]	; (8000e7c <st_init+0x298>)
 8000c8a:	f000 fbcb 	bl	8001424 <spi_reset>
 8000c8e:	4b7c      	ldr	r3, [pc, #496]	; (8000e80 <st_init+0x29c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	2300      	movs	r3, #0
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4876      	ldr	r0, [pc, #472]	; (8000e7c <st_init+0x298>)
 8000ca4:	f000 fbee 	bl	8001484 <spi_init_master>
 8000ca8:	4874      	ldr	r0, [pc, #464]	; (8000e7c <st_init+0x298>)
 8000caa:	f000 fbdd 	bl	8001468 <spi_enable_software_slave_management>
 8000cae:	4873      	ldr	r0, [pc, #460]	; (8000e7c <st_init+0x298>)
 8000cb0:	f000 fbd5 	bl	800145e <spi_set_full_duplex_mode>
 8000cb4:	4871      	ldr	r0, [pc, #452]	; (8000e7c <st_init+0x298>)
 8000cb6:	f000 fbe0 	bl	800147a <spi_set_nss_high>
 8000cba:	4870      	ldr	r0, [pc, #448]	; (8000e7c <st_init+0x298>)
 8000cbc:	f000 fbca 	bl	8001454 <spi_enable>
		ST_CS_ACTIVE;
	#endif

	// Hardwae reset is not mandatory if software rest is done
	#ifdef ST_HAS_RST
		ST_RST_ACTIVE;
 8000cc0:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <st_init+0x2a0>)
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	801a      	strh	r2, [r3, #0]
		_st_fixed_delay();
 8000cc6:	f000 f937 	bl	8000f38 <_st_fixed_delay>
		ST_RST_IDLE;
 8000cca:	4b6f      	ldr	r3, [pc, #444]	; (8000e88 <st_init+0x2a4>)
 8000ccc:	2210      	movs	r2, #16
 8000cce:	601a      	str	r2, [r3, #0]
		_st_fixed_delay();
 8000cd0:	f000 f932 	bl	8000f38 <_st_fixed_delay>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
	ST_DC_CMD;
 8000cd8:	4b6a      	ldr	r3, [pc, #424]	; (8000e84 <st_init+0x2a0>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000cde:	4a63      	ldr	r2, [pc, #396]	; (8000e6c <st_init+0x288>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
}
 8000d0c:	bf00      	nop
	#endif

	_st_write_command_8bit(ST7789_SWRESET);	//1: Software reset, no args, w/delay: delay(150)
	_st_fixed_delay();
 8000d0e:	f000 f913 	bl	8000f38 <_st_fixed_delay>
 8000d12:	2311      	movs	r3, #17
 8000d14:	723b      	strb	r3, [r7, #8]
	ST_DC_CMD;
 8000d16:	4b5b      	ldr	r3, [pc, #364]	; (8000e84 <st_init+0x2a0>)
 8000d18:	2204      	movs	r2, #4
 8000d1a:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000d1c:	4a53      	ldr	r2, [pc, #332]	; (8000e6c <st_init+0x288>)
 8000d1e:	7a3b      	ldrb	r3, [r7, #8]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
}
 8000d4a:	bf00      	nop

	_st_write_command_8bit(ST7789_SLPOUT);	// 2: Out of sleep mode, no args, w/delay: delay(500)
	_st_fixed_delay();
 8000d4c:	f000 f8f4 	bl	8000f38 <_st_fixed_delay>
 8000d50:	233a      	movs	r3, #58	; 0x3a
 8000d52:	727b      	strb	r3, [r7, #9]
	ST_DC_CMD;
 8000d54:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <st_init+0x2a0>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000d5a:	4a44      	ldr	r2, [pc, #272]	; (8000e6c <st_init+0x288>)
 8000d5c:	7a7b      	ldrb	r3, [r7, #9]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
}
 8000d88:	bf00      	nop
 8000d8a:	2355      	movs	r3, #85	; 0x55
 8000d8c:	72bb      	strb	r3, [r7, #10]
__attribute__((always_inline)) static inline void _st_write_data_8bit(uint8_t dat)
{
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_ACTIVE;
	#endif
	ST_DC_DAT;
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <st_init+0x2a4>)
 8000d90:	2204      	movs	r2, #4
 8000d92:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT(dat);
 8000d94:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <st_init+0x288>)
 8000d96:	7abb      	ldrb	r3, [r7, #10]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
	#ifdef ST_RELEASE_WHEN_IDLE
		CS_IDLE;
	#endif
}
 8000dc2:	bf00      	nop

	_st_write_command_8bit(ST7789_COLMOD);	// 3: Set color mode, 1 arg, delay: delay(10)
	_st_write_data_8bit(ST7789_COLOR_MODE_65K | ST7789_COLOR_MODE_16BIT);	// 65K color, 16-bit color
	_st_fixed_delay();
 8000dc4:	f000 f8b8 	bl	8000f38 <_st_fixed_delay>
 8000dc8:	2336      	movs	r3, #54	; 0x36
 8000dca:	72fb      	strb	r3, [r7, #11]
	ST_DC_CMD;
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <st_init+0x2a0>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000dd2:	4a26      	ldr	r2, [pc, #152]	; (8000e6c <st_init+0x288>)
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
}
 8000e00:	bf00      	nop
 8000e02:	2300      	movs	r3, #0
 8000e04:	733b      	strb	r3, [r7, #12]
	ST_DC_DAT;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <st_init+0x2a4>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	601a      	str	r2, [r3, #0]
	ST_WRITE_8BIT(dat);
 8000e0c:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <st_init+0x288>)
 8000e0e:	7b3b      	ldrb	r3, [r7, #12]
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
}
 8000e3a:	bf00      	nop
 8000e3c:	2321      	movs	r3, #33	; 0x21
 8000e3e:	737b      	strb	r3, [r7, #13]
	ST_DC_CMD;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <st_init+0x2a0>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <st_init+0x288>)
 8000e48:	7b7b      	ldrb	r3, [r7, #13]
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	e016      	b.n	8000e8c <st_init+0x2a8>
 8000e5e:	bf00      	nop
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010004 	.word	0x40010004
 8000e68:	40020038 	.word	0x40020038
 8000e6c:	4001300c 	.word	0x4001300c
 8000e70:	4002003c 	.word	0x4002003c
 8000e74:	40020034 	.word	0x40020034
 8000e78:	40020030 	.word	0x40020030
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	4001301c 	.word	0x4001301c
 8000e84:	40010814 	.word	0x40010814
 8000e88:	40010810 	.word	0x40010810
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
}
 8000ea4:	bf00      	nop

	_st_write_command_8bit(ST7789_MADCTL);	// 4: Memory access ctrl (directions), 1 arg:
	_st_write_data_8bit(ST7789_MADCTL_RGB);	// RGB Color

	_st_write_command_8bit(ST7789_INVON);	// 5: Inversion ON (but why?) delay(10)
	_st_fixed_delay();
 8000ea6:	f000 f847 	bl	8000f38 <_st_fixed_delay>
 8000eaa:	2313      	movs	r3, #19
 8000eac:	73bb      	strb	r3, [r7, #14]
	ST_DC_CMD;
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <st_init+0x34c>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <st_init+0x350>)
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
}
 8000ee2:	bf00      	nop

	_st_write_command_8bit(ST7789_NORON);	// 6: Normal display on, no args, w/delay: delay(10)
	_st_fixed_delay();
 8000ee4:	f000 f828 	bl	8000f38 <_st_fixed_delay>
 8000ee8:	2329      	movs	r3, #41	; 0x29
 8000eea:	73fb      	strb	r3, [r7, #15]
	ST_DC_CMD;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <st_init+0x34c>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	801a      	strh	r2, [r3, #0]
	ST_WRITE_8BIT(cmd);
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <st_init+0x350>)
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
}
 8000f20:	bf00      	nop

	_st_write_command_8bit(ST7789_DISPON);	// 7: Main screen turn on, no args, w/delay: delay(500)
	_st_fixed_delay();
 8000f22:	f000 f809 	bl	8000f38 <_st_fixed_delay>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40010814 	.word	0x40010814
 8000f34:	4001300c 	.word	0x4001300c

08000f38 <_st_fixed_delay>:


void _st_fixed_delay()
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 5000; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	e003      	b.n	8000f4c <_st_fixed_delay+0x14>
		__asm__("nop");
 8000f44:	bf00      	nop
	for (uint16_t i = 0; i < 5000; i++)
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	80fb      	strh	r3, [r7, #6]
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d9f6      	bls.n	8000f44 <_st_fixed_delay+0xc>
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <pre_main>:
#	include "../efm32/ezr32wg/vector_chipset.c"
#elif defined(PAC55XX)
#	include "../pac55xx/vector_chipset.c"
#else

static void pre_main(void) {}
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
	...

08000f70 <reset_handler>:
		IRQ_HANDLERS
	}
};

void __attribute__ ((weak)) reset_handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <reset_handler+0xac>)
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b29      	ldr	r3, [pc, #164]	; (8001020 <reset_handler+0xb0>)
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	e009      	b.n	8000f94 <reset_handler+0x24>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	601a      	str	r2, [r3, #0]
		src++, dest++) {
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3304      	adds	r3, #4
 8000f92:	60bb      	str	r3, [r7, #8]
	for (src = &_data_loadaddr, dest = &_data;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4a23      	ldr	r2, [pc, #140]	; (8001024 <reset_handler+0xb4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d3f1      	bcc.n	8000f80 <reset_handler+0x10>
	}

	while (dest < &_ebss) {
 8000f9c:	e004      	b.n	8000fa8 <reset_handler+0x38>
		*dest++ = 0;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1d1a      	adds	r2, r3, #4
 8000fa2:	60ba      	str	r2, [r7, #8]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	while (dest < &_ebss) {
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <reset_handler+0xb8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d3f6      	bcc.n	8000f9e <reset_handler+0x2e>
	}

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <reset_handler+0xbc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	; (800102c <reset_handler+0xbc>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]

	/* might be provided by platform specific vector.c */
	pre_main();
 8000fbc:	f7ff ffd1 	bl	8000f62 <pre_main>

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <reset_handler+0xc0>)
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	e005      	b.n	8000fd2 <reset_handler+0x62>
		(*fp)();
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <reset_handler+0xc4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d3f5      	bcc.n	8000fc6 <reset_handler+0x56>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <reset_handler+0xc8>)
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	e005      	b.n	8000fec <reset_handler+0x7c>
		(*fp)();
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <reset_handler+0xcc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d3f5      	bcc.n	8000fe0 <reset_handler+0x70>
	}

	/* Call the application's entry point. */
	(void)main();
 8000ff4:	f7ff f8ba 	bl	800016c <main>

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <reset_handler+0xd0>)
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	e005      	b.n	800100a <reset_handler+0x9a>
		(*fp)();
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3304      	adds	r3, #4
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <reset_handler+0xd4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d3f5      	bcc.n	8000ffe <reset_handler+0x8e>
	}

}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08003e70 	.word	0x08003e70
 8001020:	20000000 	.word	0x20000000
 8001024:	20000010 	.word	0x20000010
 8001028:	2000022c 	.word	0x2000022c
 800102c:	e000ed14 	.word	0xe000ed14
 8001030:	08003e70 	.word	0x08003e70
 8001034:	08003e70 	.word	0x08003e70
 8001038:	08003e70 	.word	0x08003e70
 800103c:	08003e70 	.word	0x08003e70
 8001040:	08003e70 	.word	0x08003e70
 8001044:	08003e70 	.word	0x08003e70

08001048 <blocking_handler>:

void blocking_handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	while (1);
 800104c:	e7fe      	b.n	800104c <blocking_handler+0x4>

0800104e <null_handler>:
}

void null_handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
	/* Do nothing. */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
	...

0800105c <usb_init_serial_num>:
    .iSerialNumber = USB_STRINGS_SERIAL_NUMBER_ID,
    .bNumConfigurations = sizeof(usb_config_descs) / sizeof(usb_config_descs[0]),
};

void usb_init_serial_num()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
    uint32_t id0 = DESIG_UNIQUE_ID0;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <usb_init_serial_num+0x44>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60fb      	str	r3, [r7, #12]
    uint32_t id1 = DESIG_UNIQUE_ID1;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <usb_init_serial_num+0x48>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60bb      	str	r3, [r7, #8]
    uint32_t id2 = DESIG_UNIQUE_ID2;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <usb_init_serial_num+0x4c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	607b      	str	r3, [r7, #4]

    id0 += id2;
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]

    put_hex(id0, serial_num, 8);
 800107c:	2208      	movs	r2, #8
 800107e:	490b      	ldr	r1, [pc, #44]	; (80010ac <usb_init_serial_num+0x50>)
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 f817 	bl	80010b4 <put_hex>
    put_hex(id1, serial_num + 8, 4);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <usb_init_serial_num+0x54>)
 8001088:	2204      	movs	r2, #4
 800108a:	4619      	mov	r1, r3
 800108c:	68b8      	ldr	r0, [r7, #8]
 800108e:	f000 f811 	bl	80010b4 <put_hex>
    serial_num[12] = 0;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <usb_init_serial_num+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	731a      	strb	r2, [r3, #12]
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	1ffff7e8 	.word	0x1ffff7e8
 80010a4:	1ffff7ec 	.word	0x1ffff7ec
 80010a8:	1ffff7f0 	.word	0x1ffff7f0
 80010ac:	20000114 	.word	0x20000114
 80010b0:	2000011c 	.word	0x2000011c

080010b4 <put_hex>:

const static char HEX_DIGITS[] = "0123456789ABCDEF";

void put_hex(uint32_t value, char *buf, int len)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
    for (int idx = 0; idx < len; idx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e00d      	b.n	80010e2 <put_hex+0x2e>
    {
        buf[idx] = HEX_DIGITS[value >> 28];
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	0f1a      	lsrs	r2, r3, #28
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	440b      	add	r3, r1
 80010d0:	4909      	ldr	r1, [pc, #36]	; (80010f8 <put_hex+0x44>)
 80010d2:	5c8a      	ldrb	r2, [r1, r2]
 80010d4:	701a      	strb	r2, [r3, #0]
        value = value << 4;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	60fb      	str	r3, [r7, #12]
    for (int idx = 0; idx < len; idx++)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3301      	adds	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dbed      	blt.n	80010c6 <put_hex+0x12>
    }
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	08003e28 	.word	0x08003e28

080010fc <delay>:
{
    return millis_count;
}

void delay(uint32_t ms)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    int32_t target_time = millis_count + ms;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <delay+0x30>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
    while (target_time - (int32_t)millis_count > 0);
 800110e:	bf00      	nop
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <delay+0x30>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	dcf8      	bgt.n	8001110 <delay+0x14>
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000124 	.word	0x20000124

08001130 <systick_init>:

void systick_init()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    // Initialize SysTick
    systick_set_clocksource(STK_CSR_CLKSOURCE_AHB_DIV8);
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fe77 	bl	8001e28 <systick_set_clocksource>
    systick_set_reload(rcc_ahb_frequency / 8 / 1000 - 1);
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <systick_init+0x2c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <systick_init+0x30>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	0a5b      	lsrs	r3, r3, #9
 8001146:	3b01      	subs	r3, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fe65 	bl	8001e18 <systick_set_reload>

    // Enable and start
    systick_interrupt_enable();
 800114e:	f000 fe77 	bl	8001e40 <systick_interrupt_enable>
    systick_counter_enable();
 8001152:	f000 fe7d 	bl	8001e50 <systick_counter_enable>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000004 	.word	0x20000004
 8001160:	10624dd3 	.word	0x10624dd3

08001164 <sys_tick_handler>:

// System tick timer interrupt handler
void sys_tick_handler()
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
    millis_count++;
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <sys_tick_handler+0x18>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	4a03      	ldr	r2, [pc, #12]	; (800117c <sys_tick_handler+0x18>)
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000124 	.word	0x20000124

08001180 <gpio_set_mode>:
 8001180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001184:	f04f 0c0f 	mov.w	ip, #15
 8001188:	2500      	movs	r5, #0
 800118a:	6807      	ldr	r7, [r0, #0]
 800118c:	6846      	ldr	r6, [r0, #4]
 800118e:	fa43 f405 	asr.w	r4, r3, r5
 8001192:	07e4      	lsls	r4, r4, #31
 8001194:	d51c      	bpl.n	80011d0 <gpio_set_mode+0x50>
 8001196:	2d07      	cmp	r5, #7
 8001198:	bf94      	ite	ls
 800119a:	46be      	movls	lr, r7
 800119c:	46b6      	movhi	lr, r6
 800119e:	b2ac      	uxth	r4, r5
 80011a0:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80011a4:	bf8a      	itet	hi
 80011a6:	3c20      	subhi	r4, #32
 80011a8:	b2a4      	uxthls	r4, r4
 80011aa:	b2a4      	uxthhi	r4, r4
 80011ac:	fa0c f804 	lsl.w	r8, ip, r4
 80011b0:	ea2e 0808 	bic.w	r8, lr, r8
 80011b4:	f104 0e02 	add.w	lr, r4, #2
 80011b8:	fa02 fe0e 	lsl.w	lr, r2, lr
 80011bc:	fa01 f404 	lsl.w	r4, r1, r4
 80011c0:	ea4e 0404 	orr.w	r4, lr, r4
 80011c4:	ea44 0408 	orr.w	r4, r4, r8
 80011c8:	2d07      	cmp	r5, #7
 80011ca:	bf94      	ite	ls
 80011cc:	4627      	movls	r7, r4
 80011ce:	4626      	movhi	r6, r4
 80011d0:	3501      	adds	r5, #1
 80011d2:	2d10      	cmp	r5, #16
 80011d4:	d1db      	bne.n	800118e <gpio_set_mode+0xe>
 80011d6:	6007      	str	r7, [r0, #0]
 80011d8:	6046      	str	r6, [r0, #4]
 80011da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011de <gpio_set>:
 80011de:	6101      	str	r1, [r0, #16]
 80011e0:	4770      	bx	lr

080011e2 <gpio_clear>:
 80011e2:	0409      	lsls	r1, r1, #16
 80011e4:	6101      	str	r1, [r0, #16]
 80011e6:	4770      	bx	lr

080011e8 <rcc_osc_on.part.0>:
 80011e8:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <rcc_osc_on.part.0+0xc>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000

080011f8 <rcc_is_osc_ready>:
 80011f8:	2806      	cmp	r0, #6
 80011fa:	d822      	bhi.n	8001242 <rcc_is_osc_ready+0x4a>
 80011fc:	e8df f000 	tbb	[pc, r0]
 8001200:	130e0904 	.word	0x130e0904
 8001204:	1d18      	.short	0x1d18
 8001206:	1f          	.byte	0x1f
 8001207:	00          	.byte	0x00
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <rcc_is_osc_ready+0x50>)
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8001210:	4770      	bx	lr
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <rcc_is_osc_ready+0x50>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 800121a:	4770      	bx	lr
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <rcc_is_osc_ready+0x50>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	f3c0 7040 	ubfx	r0, r0, #29, #1
 8001224:	4770      	bx	lr
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <rcc_is_osc_ready+0x50>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800122e:	4770      	bx	lr
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <rcc_is_osc_ready+0x50>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001238:	4770      	bx	lr
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <rcc_is_osc_ready+0x54>)
 800123c:	e7f9      	b.n	8001232 <rcc_is_osc_ready+0x3a>
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <rcc_is_osc_ready+0x58>)
 8001240:	e7f7      	b.n	8001232 <rcc_is_osc_ready+0x3a>
 8001242:	2000      	movs	r0, #0
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	40021020 	.word	0x40021020
 8001250:	40021024 	.word	0x40021024

08001254 <rcc_wait_for_osc_ready>:
 8001254:	4602      	mov	r2, r0
 8001256:	b508      	push	{r3, lr}
 8001258:	4610      	mov	r0, r2
 800125a:	f7ff ffcd 	bl	80011f8 <rcc_is_osc_ready>
 800125e:	2800      	cmp	r0, #0
 8001260:	d0fa      	beq.n	8001258 <rcc_wait_for_osc_ready+0x4>
 8001262:	bd08      	pop	{r3, pc}

08001264 <rcc_osc_on>:
 8001264:	2806      	cmp	r0, #6
 8001266:	d80c      	bhi.n	8001282 <rcc_osc_on+0x1e>
 8001268:	e8df f000 	tbb	[pc, r0]
 800126c:	110c0604 	.word	0x110c0604
 8001270:	1b16      	.short	0x1b16
 8001272:	1d          	.byte	0x1d
 8001273:	00          	.byte	0x00
 8001274:	f7ff bfb8 	b.w	80011e8 <rcc_osc_on.part.0>
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <rcc_osc_on+0x48>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4770      	bx	lr
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <rcc_osc_on+0x48>)
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	e7f8      	b.n	8001280 <rcc_osc_on+0x1c>
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <rcc_osc_on+0x48>)
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001296:	e7f3      	b.n	8001280 <rcc_osc_on+0x1c>
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <rcc_osc_on+0x48>)
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	e7ee      	b.n	8001280 <rcc_osc_on+0x1c>
 80012a2:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <rcc_osc_on+0x4c>)
 80012a4:	e7f9      	b.n	800129a <rcc_osc_on+0x36>
 80012a6:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <rcc_osc_on+0x50>)
 80012a8:	e7f7      	b.n	800129a <rcc_osc_on+0x36>
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40021020 	.word	0x40021020
 80012b4:	40021024 	.word	0x40021024

080012b8 <rcc_set_sysclk_source>:
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <rcc_set_sysclk_source+0x10>)
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	f023 0303 	bic.w	r3, r3, #3
 80012c0:	4303      	orrs	r3, r0
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021004 	.word	0x40021004

080012cc <rcc_set_pll_multiplication_factor>:
 80012cc:	4a03      	ldr	r2, [pc, #12]	; (80012dc <rcc_set_pll_multiplication_factor+0x10>)
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80012d4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4770      	bx	lr
 80012dc:	40021004 	.word	0x40021004

080012e0 <rcc_set_pll_source>:
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <rcc_set_pll_source+0x10>)
 80012e2:	6813      	ldr	r3, [r2, #0]
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4770      	bx	lr
 80012f0:	40021004 	.word	0x40021004

080012f4 <rcc_set_pllxtpre>:
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <rcc_set_pllxtpre+0x10>)
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012fc:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4770      	bx	lr
 8001304:	40021004 	.word	0x40021004

08001308 <rcc_set_adcpre>:
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <rcc_set_adcpre+0x10>)
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001310:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4770      	bx	lr
 8001318:	40021004 	.word	0x40021004

0800131c <rcc_set_ppre2>:
 800131c:	4a03      	ldr	r2, [pc, #12]	; (800132c <rcc_set_ppre2+0x10>)
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001324:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4770      	bx	lr
 800132c:	40021004 	.word	0x40021004

08001330 <rcc_set_ppre1>:
 8001330:	4a03      	ldr	r2, [pc, #12]	; (8001340 <rcc_set_ppre1+0x10>)
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001338:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4770      	bx	lr
 8001340:	40021004 	.word	0x40021004

08001344 <rcc_set_hpre>:
 8001344:	4a03      	ldr	r2, [pc, #12]	; (8001354 <rcc_set_hpre+0x10>)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800134c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4770      	bx	lr
 8001354:	40021004 	.word	0x40021004

08001358 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
 8001358:	b508      	push	{r3, lr}
 800135a:	2004      	movs	r0, #4
 800135c:	f7ff ff82 	bl	8001264 <rcc_osc_on>
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff ff77 	bl	8001254 <rcc_wait_for_osc_ready>
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ffa6 	bl	80012b8 <rcc_set_sysclk_source>
 800136c:	2003      	movs	r0, #3
 800136e:	f7ff ff79 	bl	8001264 <rcc_osc_on>
 8001372:	2003      	movs	r0, #3
 8001374:	f7ff ff6e 	bl	8001254 <rcc_wait_for_osc_ready>
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff ff9d 	bl	80012b8 <rcc_set_sysclk_source>
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff ffe0 	bl	8001344 <rcc_set_hpre>
 8001384:	2003      	movs	r0, #3
 8001386:	f7ff ffbf 	bl	8001308 <rcc_set_adcpre>
 800138a:	2004      	movs	r0, #4
 800138c:	f7ff ffd0 	bl	8001330 <rcc_set_ppre1>
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff ffc3 	bl	800131c <rcc_set_ppre2>
 8001396:	2002      	movs	r0, #2
 8001398:	f000 fd80 	bl	8001e9c <flash_set_ws>
 800139c:	2007      	movs	r0, #7
 800139e:	f7ff ff95 	bl	80012cc <rcc_set_pll_multiplication_factor>
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff ff9c 	bl	80012e0 <rcc_set_pll_source>
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffa3 	bl	80012f4 <rcc_set_pllxtpre>
 80013ae:	f7ff ff1b 	bl	80011e8 <rcc_osc_on.part.0>
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff4e 	bl	8001254 <rcc_wait_for_osc_ready>
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff ff7d 	bl	80012b8 <rcc_set_sysclk_source>
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x78>)
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x7c>)
 80013c2:	4905      	ldr	r1, [pc, #20]	; (80013d8 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x80>)
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x84>)
 80013c8:	6011      	str	r1, [r2, #0]
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x88>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	bd08      	pop	{r3, pc}
 80013d0:	044aa200 	.word	0x044aa200
 80013d4:	20000004 	.word	0x20000004
 80013d8:	02255100 	.word	0x02255100
 80013dc:	20000008 	.word	0x20000008
 80013e0:	2000000c 	.word	0x2000000c

080013e4 <rcc_periph_clock_enable>:
 80013e4:	2201      	movs	r2, #1
 80013e6:	0943      	lsrs	r3, r0, #5
 80013e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	f000 001f 	and.w	r0, r0, #31
 80013f6:	fa02 f000 	lsl.w	r0, r2, r0
 80013fa:	4308      	orrs	r0, r1
 80013fc:	6018      	str	r0, [r3, #0]
 80013fe:	4770      	bx	lr

08001400 <rcc_periph_reset_pulse>:
 8001400:	2201      	movs	r2, #1
 8001402:	0943      	lsrs	r3, r0, #5
 8001404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001408:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	f000 001f 	and.w	r0, r0, #31
 8001412:	fa02 f000 	lsl.w	r0, r2, r0
 8001416:	4301      	orrs	r1, r0
 8001418:	6019      	str	r1, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	ea22 0000 	bic.w	r0, r2, r0
 8001420:	6018      	str	r0, [r3, #0]
 8001422:	4770      	bx	lr

08001424 <spi_reset>:
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <spi_reset+0x2c>)
 8001426:	4298      	cmp	r0, r3
 8001428:	d00e      	beq.n	8001448 <spi_reset+0x24>
 800142a:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 800142e:	4298      	cmp	r0, r3
 8001430:	d006      	beq.n	8001440 <spi_reset+0x1c>
 8001432:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8001436:	4298      	cmp	r0, r3
 8001438:	d109      	bne.n	800144e <spi_reset+0x2a>
 800143a:	f240 200e 	movw	r0, #526	; 0x20e
 800143e:	e001      	b.n	8001444 <spi_reset+0x20>
 8001440:	f44f 70c6 	mov.w	r0, #396	; 0x18c
 8001444:	f7ff bfdc 	b.w	8001400 <rcc_periph_reset_pulse>
 8001448:	f240 200f 	movw	r0, #527	; 0x20f
 800144c:	e7fa      	b.n	8001444 <spi_reset+0x20>
 800144e:	4770      	bx	lr
 8001450:	40003c00 	.word	0x40003c00

08001454 <spi_enable>:
 8001454:	6803      	ldr	r3, [r0, #0]
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6003      	str	r3, [r0, #0]
 800145c:	4770      	bx	lr

0800145e <spi_set_full_duplex_mode>:
 800145e:	6803      	ldr	r3, [r0, #0]
 8001460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001464:	6003      	str	r3, [r0, #0]
 8001466:	4770      	bx	lr

08001468 <spi_enable_software_slave_management>:
 8001468:	6803      	ldr	r3, [r0, #0]
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6003      	str	r3, [r0, #0]
 8001470:	6843      	ldr	r3, [r0, #4]
 8001472:	f023 0304 	bic.w	r3, r3, #4
 8001476:	6043      	str	r3, [r0, #4]
 8001478:	4770      	bx	lr

0800147a <spi_set_nss_high>:
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6003      	str	r3, [r0, #0]
 8001482:	4770      	bx	lr

08001484 <spi_init_master>:
 8001484:	b530      	push	{r4, r5, lr}
 8001486:	6804      	ldr	r4, [r0, #0]
 8001488:	9d04      	ldr	r5, [sp, #16]
 800148a:	f404 5441 	and.w	r4, r4, #12352	; 0x3040
 800148e:	432c      	orrs	r4, r5
 8001490:	9d03      	ldr	r5, [sp, #12]
 8001492:	432c      	orrs	r4, r5
 8001494:	431c      	orrs	r4, r3
 8001496:	4314      	orrs	r4, r2
 8001498:	6843      	ldr	r3, [r0, #4]
 800149a:	430c      	orrs	r4, r1
 800149c:	f044 0404 	orr.w	r4, r4, #4
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6043      	str	r3, [r0, #4]
 80014a6:	6004      	str	r4, [r0, #0]
 80014a8:	2000      	movs	r0, #0
 80014aa:	bd30      	pop	{r4, r5, pc}

080014ac <usbd_init>:
 80014ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b0:	461e      	mov	r6, r3
 80014b2:	6803      	ldr	r3, [r0, #0]
 80014b4:	4605      	mov	r5, r0
 80014b6:	4688      	mov	r8, r1
 80014b8:	4617      	mov	r7, r2
 80014ba:	4798      	blx	r3
 80014bc:	9b06      	ldr	r3, [sp, #24]
 80014be:	e9c0 8700 	strd	r8, r7, [r0]
 80014c2:	60c3      	str	r3, [r0, #12]
 80014c4:	9b07      	ldr	r3, [sp, #28]
 80014c6:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
 80014ca:	6103      	str	r3, [r0, #16]
 80014cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80014d0:	6086      	str	r6, [r0, #8]
 80014d2:	8283      	strh	r3, [r0, #20]
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <usbd_init+0x44>)
 80014d6:	6703      	str	r3, [r0, #112]	; 0x70
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <usbd_init+0x48>)
 80014da:	66c3      	str	r3, [r0, #108]	; 0x6c
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <usbd_init+0x4c>)
 80014de:	6683      	str	r3, [r0, #104]	; 0x68
 80014e0:	2300      	movs	r3, #0
 80014e2:	e9c0 3332 	strd	r3, r3, [r0, #200]	; 0xc8
 80014e6:	e9c0 3334 	strd	r3, r3, [r0, #208]	; 0xd0
 80014ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014ee:	bf00      	nop
 80014f0:	0800170d 	.word	0x0800170d
 80014f4:	0800176d 	.word	0x0800176d
 80014f8:	080017ef 	.word	0x080017ef

080014fc <usbd_poll>:
 80014fc:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	4718      	bx	r3

08001504 <usbd_ep_setup>:
 8001504:	b410      	push	{r4}
 8001506:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 800150a:	68a4      	ldr	r4, [r4, #8]
 800150c:	46a4      	mov	ip, r4
 800150e:	bc10      	pop	{r4}
 8001510:	4760      	bx	ip

08001512 <_usbd_reset>:
 8001512:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001514:	2500      	movs	r5, #0
 8001516:	4604      	mov	r4, r0
 8001518:	6803      	ldr	r3, [r0, #0]
 800151a:	82c5      	strh	r5, [r0, #22]
 800151c:	79db      	ldrb	r3, [r3, #7]
 800151e:	462a      	mov	r2, r5
 8001520:	4629      	mov	r1, r5
 8001522:	9500      	str	r5, [sp, #0]
 8001524:	f7ff ffee 	bl	8001504 <usbd_ep_setup>
 8001528:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800152c:	4629      	mov	r1, r5
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4620      	mov	r0, r4
 8001532:	4798      	blx	r3
 8001534:	69e3      	ldr	r3, [r4, #28]
 8001536:	b11b      	cbz	r3, 8001540 <_usbd_reset+0x2e>
 8001538:	b003      	add	sp, #12
 800153a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800153e:	4718      	bx	r3
 8001540:	b003      	add	sp, #12
 8001542:	bd30      	pop	{r4, r5, pc}

08001544 <usbd_ep_write_packet>:
 8001544:	b410      	push	{r4}
 8001546:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 800154a:	69e4      	ldr	r4, [r4, #28]
 800154c:	46a4      	mov	ip, r4
 800154e:	bc10      	pop	{r4}
 8001550:	4760      	bx	ip

08001552 <usbd_ep_read_packet>:
 8001552:	b410      	push	{r4}
 8001554:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8001558:	6a24      	ldr	r4, [r4, #32]
 800155a:	46a4      	mov	ip, r4
 800155c:	bc10      	pop	{r4}
 800155e:	4760      	bx	ip

08001560 <usbd_ep_stall_set>:
 8001560:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	4718      	bx	r3

08001568 <usbd_ep_stall_get>:
 8001568:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4718      	bx	r3

08001570 <usbd_ep_nak_set>:
 8001570:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4718      	bx	r3

08001578 <usb_control_send_chunk>:
 8001578:	b510      	push	{r4, lr}
 800157a:	6803      	ldr	r3, [r0, #0]
 800157c:	4604      	mov	r4, r0
 800157e:	79d9      	ldrb	r1, [r3, #7]
 8001580:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8001582:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001584:	4299      	cmp	r1, r3
 8001586:	d20f      	bcs.n	80015a8 <usb_control_send_chunk+0x30>
 8001588:	460b      	mov	r3, r1
 800158a:	2100      	movs	r1, #0
 800158c:	f7ff ffda 	bl	8001544 <usbd_ep_write_packet>
 8001590:	2302      	movs	r3, #2
 8001592:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800159a:	79d9      	ldrb	r1, [r3, #7]
 800159c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800159e:	440a      	add	r2, r1
 80015a0:	1a5b      	subs	r3, r3, r1
 80015a2:	63a2      	str	r2, [r4, #56]	; 0x38
 80015a4:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	2100      	movs	r1, #0
 80015aa:	f7ff ffcb 	bl	8001544 <usbd_ep_write_packet>
 80015ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2302      	movne	r3, #2
 80015b8:	2303      	moveq	r3, #3
 80015ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80015be:	2300      	movs	r3, #0
 80015c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80015c4:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80015c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80015c8:	e7ed      	b.n	80015a6 <usb_control_send_chunk+0x2e>

080015ca <usb_control_request_dispatch>:
 80015ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ce:	4604      	mov	r4, r0
 80015d0:	460e      	mov	r6, r1
 80015d2:	4605      	mov	r5, r0
 80015d4:	f100 0a20 	add.w	sl, r0, #32
 80015d8:	f100 0838 	add.w	r8, r0, #56	; 0x38
 80015dc:	f100 0b3c 	add.w	fp, r0, #60	; 0x3c
 80015e0:	f100 0940 	add.w	r9, r0, #64	; 0x40
 80015e4:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80015e6:	b947      	cbnz	r7, 80015fa <usb_control_request_dispatch+0x30>
 80015e8:	465b      	mov	r3, fp
 80015ea:	4642      	mov	r2, r8
 80015ec:	4631      	mov	r1, r6
 80015ee:	4620      	mov	r0, r4
 80015f0:	b003      	add	sp, #12
 80015f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f6:	f000 bbbf 	b.w	8001d78 <_usbd_standard_request>
 80015fa:	7831      	ldrb	r1, [r6, #0]
 80015fc:	f895 204d 	ldrb.w	r2, [r5, #77]	; 0x4d
 8001600:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8001604:	4011      	ands	r1, r2
 8001606:	428b      	cmp	r3, r1
 8001608:	d003      	beq.n	8001612 <usb_control_request_dispatch+0x48>
 800160a:	3508      	adds	r5, #8
 800160c:	4555      	cmp	r5, sl
 800160e:	d1e9      	bne.n	80015e4 <usb_control_request_dispatch+0x1a>
 8001610:	e7ea      	b.n	80015e8 <usb_control_request_dispatch+0x1e>
 8001612:	465b      	mov	r3, fp
 8001614:	4642      	mov	r2, r8
 8001616:	4631      	mov	r1, r6
 8001618:	4620      	mov	r0, r4
 800161a:	f8cd 9000 	str.w	r9, [sp]
 800161e:	47b8      	blx	r7
 8001620:	2801      	cmp	r0, #1
 8001622:	d8f2      	bhi.n	800160a <usb_control_request_dispatch+0x40>
 8001624:	b003      	add	sp, #12
 8001626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800162a <stall_transaction>:
 800162a:	b510      	push	{r4, lr}
 800162c:	2201      	movs	r2, #1
 800162e:	2100      	movs	r1, #0
 8001630:	4604      	mov	r4, r0
 8001632:	f7ff ff95 	bl	8001560 <usbd_ep_stall_set>
 8001636:	2300      	movs	r3, #0
 8001638:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800163c:	bd10      	pop	{r4, pc}

0800163e <usb_control_recv_chunk>:
 800163e:	b570      	push	{r4, r5, r6, lr}
 8001640:	6803      	ldr	r3, [r0, #0]
 8001642:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8001644:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001646:	79db      	ldrb	r3, [r3, #7]
 8001648:	1aa4      	subs	r4, r4, r2
 800164a:	429c      	cmp	r4, r3
 800164c:	bfa8      	it	ge
 800164e:	461c      	movge	r4, r3
 8001650:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001652:	b2a6      	uxth	r6, r4
 8001654:	440a      	add	r2, r1
 8001656:	4633      	mov	r3, r6
 8001658:	2100      	movs	r1, #0
 800165a:	4605      	mov	r5, r0
 800165c:	f7ff ff79 	bl	8001552 <usbd_ep_read_packet>
 8001660:	4286      	cmp	r6, r0
 8001662:	d005      	beq.n	8001670 <usb_control_recv_chunk+0x32>
 8001664:	4628      	mov	r0, r5
 8001666:	f7ff ffe0 	bl	800162a <stall_transaction>
 800166a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8001672:	b2a0      	uxth	r0, r4
 8001674:	441e      	add	r6, r3
 8001676:	87ae      	strh	r6, [r5, #60]	; 0x3c
 8001678:	e7f9      	b.n	800166e <usb_control_recv_chunk+0x30>

0800167a <usb_control_setup_read>:
 800167a:	b538      	push	{r3, r4, r5, lr}
 800167c:	6903      	ldr	r3, [r0, #16]
 800167e:	4604      	mov	r4, r0
 8001680:	6383      	str	r3, [r0, #56]	; 0x38
 8001682:	798b      	ldrb	r3, [r1, #6]
 8001684:	79ca      	ldrb	r2, [r1, #7]
 8001686:	460d      	mov	r5, r1
 8001688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800168c:	8783      	strh	r3, [r0, #60]	; 0x3c
 800168e:	f7ff ff9c 	bl	80015ca <usb_control_request_dispatch>
 8001692:	b300      	cbz	r0, 80016d6 <usb_control_setup_read+0x5c>
 8001694:	88eb      	ldrh	r3, [r5, #6]
 8001696:	b1ab      	cbz	r3, 80016c4 <usb_control_setup_read+0x4a>
 8001698:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800169a:	6821      	ldr	r1, [r4, #0]
 800169c:	4293      	cmp	r3, r2
 800169e:	79c9      	ldrb	r1, [r1, #7]
 80016a0:	d90e      	bls.n	80016c0 <usb_control_setup_read+0x46>
 80016a2:	b132      	cbz	r2, 80016b2 <usb_control_setup_read+0x38>
 80016a4:	fbb2 f3f1 	udiv	r3, r2, r1
 80016a8:	fb01 2213 	mls	r2, r1, r3, r2
 80016ac:	fab2 f282 	clz	r2, r2
 80016b0:	0952      	lsrs	r2, r2, #5
 80016b2:	4620      	mov	r0, r4
 80016b4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80016b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016bc:	f7ff bf5c 	b.w	8001578 <usb_control_send_chunk>
 80016c0:	2200      	movs	r2, #0
 80016c2:	e7f6      	b.n	80016b2 <usb_control_setup_read+0x38>
 80016c4:	461a      	mov	r2, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff ff3b 	bl	8001544 <usbd_ep_write_packet>
 80016ce:	2304      	movs	r3, #4
 80016d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80016d4:	bd38      	pop	{r3, r4, r5, pc}
 80016d6:	4620      	mov	r0, r4
 80016d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016dc:	f7ff bfa5 	b.w	800162a <stall_transaction>

080016e0 <usbd_register_control_callback>:
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	2400      	movs	r4, #0
 80016e4:	f100 0648 	add.w	r6, r0, #72	; 0x48
 80016e8:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 80016ec:	b12d      	cbz	r5, 80016fa <usbd_register_control_callback+0x1a>
 80016ee:	3401      	adds	r4, #1
 80016f0:	2c04      	cmp	r4, #4
 80016f2:	d1f9      	bne.n	80016e8 <usbd_register_control_callback+0x8>
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
 80016fa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80016fe:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
 8001702:	4628      	mov	r0, r5
 8001704:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8001708:	64a3      	str	r3, [r4, #72]	; 0x48
 800170a:	e7f5      	b.n	80016f8 <usbd_register_control_callback+0x18>

0800170c <_usbd_control_setup>:
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	2500      	movs	r5, #0
 8001710:	4604      	mov	r4, r0
 8001712:	2201      	movs	r2, #1
 8001714:	4629      	mov	r1, r5
 8001716:	6405      	str	r5, [r0, #64]	; 0x40
 8001718:	f100 0630 	add.w	r6, r0, #48	; 0x30
 800171c:	f7ff ff28 	bl	8001570 <usbd_ep_nak_set>
 8001720:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001722:	b92a      	cbnz	r2, 8001730 <_usbd_control_setup+0x24>
 8001724:	4631      	mov	r1, r6
 8001726:	4620      	mov	r0, r4
 8001728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800172c:	f7ff bfa5 	b.w	800167a <usb_control_setup_read>
 8001730:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8001734:	2b00      	cmp	r3, #0
 8001736:	dbf5      	blt.n	8001724 <_usbd_control_setup+0x18>
 8001738:	8aa3      	ldrh	r3, [r4, #20]
 800173a:	4293      	cmp	r3, r2
 800173c:	d204      	bcs.n	8001748 <_usbd_control_setup+0x3c>
 800173e:	4620      	mov	r0, r4
 8001740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001744:	f7ff bf71 	b.w	800162a <stall_transaction>
 8001748:	6923      	ldr	r3, [r4, #16]
 800174a:	87a5      	strh	r5, [r4, #60]	; 0x3c
 800174c:	63a3      	str	r3, [r4, #56]	; 0x38
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	4629      	mov	r1, r5
 8001752:	79db      	ldrb	r3, [r3, #7]
 8001754:	4620      	mov	r0, r4
 8001756:	4293      	cmp	r3, r2
 8001758:	bf34      	ite	cc
 800175a:	2305      	movcc	r3, #5
 800175c:	2306      	movcs	r3, #6
 800175e:	462a      	mov	r2, r5
 8001760:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001768:	f7ff bf02 	b.w	8001570 <usbd_ep_nak_set>

0800176c <_usbd_control_out>:
 800176c:	b510      	push	{r4, lr}
 800176e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001772:	4604      	mov	r4, r0
 8001774:	2b06      	cmp	r3, #6
 8001776:	d012      	beq.n	800179e <_usbd_control_out+0x32>
 8001778:	2b07      	cmp	r3, #7
 800177a:	d027      	beq.n	80017cc <_usbd_control_out+0x60>
 800177c:	2b05      	cmp	r3, #5
 800177e:	d121      	bne.n	80017c4 <_usbd_control_out+0x58>
 8001780:	f7ff ff5d 	bl	800163e <usb_control_recv_chunk>
 8001784:	2800      	cmp	r0, #0
 8001786:	db09      	blt.n	800179c <_usbd_control_out+0x30>
 8001788:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800178a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	79d2      	ldrb	r2, [r2, #7]
 8001792:	4293      	cmp	r3, r2
 8001794:	dc02      	bgt.n	800179c <_usbd_control_out+0x30>
 8001796:	2306      	movs	r3, #6
 8001798:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800179c:	bd10      	pop	{r4, pc}
 800179e:	f7ff ff4e 	bl	800163e <usb_control_recv_chunk>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	dbfa      	blt.n	800179c <_usbd_control_out+0x30>
 80017a6:	4620      	mov	r0, r4
 80017a8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80017ac:	f7ff ff0d 	bl	80015ca <usb_control_request_dispatch>
 80017b0:	b138      	cbz	r0, 80017c2 <_usbd_control_out+0x56>
 80017b2:	2300      	movs	r3, #0
 80017b4:	4620      	mov	r0, r4
 80017b6:	461a      	mov	r2, r3
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fec3 	bl	8001544 <usbd_ep_write_packet>
 80017be:	2304      	movs	r3, #4
 80017c0:	e7ea      	b.n	8001798 <_usbd_control_out+0x2c>
 80017c2:	4620      	mov	r0, r4
 80017c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017c8:	f7ff bf2f 	b.w	800162a <stall_transaction>
 80017cc:	2300      	movs	r3, #0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff febe 	bl	8001552 <usbd_ep_read_packet>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80017dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017de:	b11b      	cbz	r3, 80017e8 <_usbd_control_out+0x7c>
 80017e0:	4620      	mov	r0, r4
 80017e2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80017e6:	4798      	blx	r3
 80017e8:	2300      	movs	r3, #0
 80017ea:	6423      	str	r3, [r4, #64]	; 0x40
 80017ec:	e7d6      	b.n	800179c <_usbd_control_out+0x30>

080017ee <_usbd_control_in>:
 80017ee:	b510      	push	{r4, lr}
 80017f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80017f4:	4604      	mov	r4, r0
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d007      	beq.n	800180a <_usbd_control_in+0x1c>
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d00e      	beq.n	800181c <_usbd_control_in+0x2e>
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d123      	bne.n	800184a <_usbd_control_in+0x5c>
 8001802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001806:	f7ff beb7 	b.w	8001578 <usb_control_send_chunk>
 800180a:	2307      	movs	r3, #7
 800180c:	2200      	movs	r2, #0
 800180e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8001812:	4611      	mov	r1, r2
 8001814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001818:	f7ff beaa 	b.w	8001570 <usbd_ep_nak_set>
 800181c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800181e:	b113      	cbz	r3, 8001826 <_usbd_control_in+0x38>
 8001820:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001824:	4798      	blx	r3
 8001826:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800182a:	b953      	cbnz	r3, 8001842 <_usbd_control_in+0x54>
 800182c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001830:	2b05      	cmp	r3, #5
 8001832:	d106      	bne.n	8001842 <_usbd_control_in+0x54>
 8001834:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001836:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800183a:	4620      	mov	r0, r4
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	b2c9      	uxtb	r1, r1
 8001840:	4798      	blx	r3
 8001842:	2300      	movs	r3, #0
 8001844:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001848:	bd10      	pop	{r4, pc}
 800184a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800184e:	f7ff beec 	b.w	800162a <stall_transaction>

08001852 <usb_standard_set_address>:
 8001852:	b510      	push	{r4, lr}
 8001854:	780b      	ldrb	r3, [r1, #0]
 8001856:	b973      	cbnz	r3, 8001876 <usb_standard_set_address+0x24>
 8001858:	884c      	ldrh	r4, [r1, #2]
 800185a:	2c7f      	cmp	r4, #127	; 0x7f
 800185c:	d80c      	bhi.n	8001878 <usb_standard_set_address+0x26>
 800185e:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001862:	7584      	strb	r4, [r0, #22]
 8001864:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001868:	b11a      	cbz	r2, 8001872 <usb_standard_set_address+0x20>
 800186a:	8849      	ldrh	r1, [r1, #2]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	b2c9      	uxtb	r1, r1
 8001870:	4798      	blx	r3
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <usb_standard_set_address+0x26>
 8001876:	2300      	movs	r3, #0
 8001878:	4618      	mov	r0, r3
 800187a:	bd10      	pop	{r4, pc}

0800187c <usb_standard_set_configuration>:
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	460d      	mov	r5, r1
 8001880:	8849      	ldrh	r1, [r1, #2]
 8001882:	4604      	mov	r4, r0
 8001884:	b179      	cbz	r1, 80018a6 <usb_standard_set_configuration+0x2a>
 8001886:	6803      	ldr	r3, [r0, #0]
 8001888:	260d      	movs	r6, #13
 800188a:	7c58      	ldrb	r0, [r3, #17]
 800188c:	2300      	movs	r3, #0
 800188e:	4298      	cmp	r0, r3
 8001890:	d801      	bhi.n	8001896 <usb_standard_set_configuration+0x1a>
 8001892:	2000      	movs	r0, #0
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001896:	6862      	ldr	r2, [r4, #4]
 8001898:	fb06 2203 	mla	r2, r6, r3, r2
 800189c:	7952      	ldrb	r2, [r2, #5]
 800189e:	428a      	cmp	r2, r1
 80018a0:	d003      	beq.n	80018aa <usb_standard_set_configuration+0x2e>
 80018a2:	3301      	adds	r3, #1
 80018a4:	e7f3      	b.n	800188e <usb_standard_set_configuration+0x12>
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	75e3      	strb	r3, [r4, #23]
 80018b0:	b94b      	cbnz	r3, 80018c6 <usb_standard_set_configuration+0x4a>
 80018b2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80018b6:	4620      	mov	r0, r4
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4798      	blx	r3
 80018bc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80018c0:	b99b      	cbnz	r3, 80018ea <usb_standard_set_configuration+0x6e>
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7e6      	b.n	8001894 <usb_standard_set_configuration+0x18>
 80018c6:	220d      	movs	r2, #13
 80018c8:	4353      	muls	r3, r2
 80018ca:	6862      	ldr	r2, [r4, #4]
 80018cc:	3b0d      	subs	r3, #13
 80018ce:	4413      	add	r3, r2
 80018d0:	2200      	movs	r2, #0
 80018d2:	4610      	mov	r0, r2
 80018d4:	7919      	ldrb	r1, [r3, #4]
 80018d6:	4291      	cmp	r1, r2
 80018d8:	d9eb      	bls.n	80018b2 <usb_standard_set_configuration+0x36>
 80018da:	f8d3 1009 	ldr.w	r1, [r3, #9]
 80018de:	0116      	lsls	r6, r2, #4
 80018e0:	5871      	ldr	r1, [r6, r1]
 80018e2:	b101      	cbz	r1, 80018e6 <usb_standard_set_configuration+0x6a>
 80018e4:	7008      	strb	r0, [r1, #0]
 80018e6:	3201      	adds	r2, #1
 80018e8:	e7f4      	b.n	80018d4 <usb_standard_set_configuration+0x58>
 80018ea:	2300      	movs	r3, #0
 80018ec:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 80018f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80018f2:	6523      	str	r3, [r4, #80]	; 0x50
 80018f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80018f6:	6623      	str	r3, [r4, #96]	; 0x60
 80018f8:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
 80018fc:	f856 3b04 	ldr.w	r3, [r6], #4
 8001900:	b113      	cbz	r3, 8001908 <usb_standard_set_configuration+0x8c>
 8001902:	4620      	mov	r0, r4
 8001904:	8869      	ldrh	r1, [r5, #2]
 8001906:	4798      	blx	r3
 8001908:	42b7      	cmp	r7, r6
 800190a:	d1f7      	bne.n	80018fc <usb_standard_set_configuration+0x80>
 800190c:	e7d9      	b.n	80018c2 <usb_standard_set_configuration+0x46>

0800190e <usb_standard_get_configuration>:
 800190e:	8819      	ldrh	r1, [r3, #0]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	2901      	cmp	r1, #1
 8001914:	bf84      	itt	hi
 8001916:	2101      	movhi	r1, #1
 8001918:	8019      	strhhi	r1, [r3, #0]
 800191a:	7dc3      	ldrb	r3, [r0, #23]
 800191c:	b12b      	cbz	r3, 800192a <usb_standard_get_configuration+0x1c>
 800191e:	6841      	ldr	r1, [r0, #4]
 8001920:	200d      	movs	r0, #13
 8001922:	fb00 1303 	mla	r3, r0, r3, r1
 8001926:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800192a:	2001      	movs	r0, #1
 800192c:	7013      	strb	r3, [r2, #0]
 800192e:	4770      	bx	lr

08001930 <usb_standard_get_interface>:
 8001930:	b530      	push	{r4, r5, lr}
 8001932:	240d      	movs	r4, #13
 8001934:	7dc5      	ldrb	r5, [r0, #23]
 8001936:	6840      	ldr	r0, [r0, #4]
 8001938:	436c      	muls	r4, r5
 800193a:	3c0d      	subs	r4, #13
 800193c:	4404      	add	r4, r0
 800193e:	888d      	ldrh	r5, [r1, #4]
 8001940:	7920      	ldrb	r0, [r4, #4]
 8001942:	4285      	cmp	r5, r0
 8001944:	d20c      	bcs.n	8001960 <usb_standard_get_interface+0x30>
 8001946:	2001      	movs	r0, #1
 8001948:	8018      	strh	r0, [r3, #0]
 800194a:	888b      	ldrh	r3, [r1, #4]
 800194c:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	581b      	ldr	r3, [r3, r0]
 8001954:	b103      	cbz	r3, 8001958 <usb_standard_get_interface+0x28>
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2001      	movs	r0, #1
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	7013      	strb	r3, [r2, #0]
 800195e:	bd30      	pop	{r4, r5, pc}
 8001960:	2000      	movs	r0, #0
 8001962:	e7fc      	b.n	800195e <usb_standard_get_interface+0x2e>

08001964 <usb_standard_device_get_status>:
 8001964:	8819      	ldrh	r1, [r3, #0]
 8001966:	2001      	movs	r0, #1
 8001968:	2902      	cmp	r1, #2
 800196a:	bf84      	itt	hi
 800196c:	2102      	movhi	r1, #2
 800196e:	8019      	strhhi	r1, [r3, #0]
 8001970:	2300      	movs	r3, #0
 8001972:	6811      	ldr	r1, [r2, #0]
 8001974:	700b      	strb	r3, [r1, #0]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	7053      	strb	r3, [r2, #1]
 800197a:	4770      	bx	lr

0800197c <usb_standard_endpoint_get_status>:
 800197c:	b510      	push	{r4, lr}
 800197e:	4614      	mov	r4, r2
 8001980:	881a      	ldrh	r2, [r3, #0]
 8001982:	2a02      	cmp	r2, #2
 8001984:	bf84      	itt	hi
 8001986:	2202      	movhi	r2, #2
 8001988:	801a      	strhhi	r2, [r3, #0]
 800198a:	8889      	ldrh	r1, [r1, #4]
 800198c:	b2c9      	uxtb	r1, r1
 800198e:	f7ff fdeb 	bl	8001568 <usbd_ep_stall_get>
 8001992:	3800      	subs	r0, #0
 8001994:	bf18      	it	ne
 8001996:	2001      	movne	r0, #1
 8001998:	2200      	movs	r2, #0
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	7018      	strb	r0, [r3, #0]
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	2001      	movs	r0, #1
 80019a2:	705a      	strb	r2, [r3, #1]
 80019a4:	bd10      	pop	{r4, pc}

080019a6 <usb_standard_endpoint_stall>:
 80019a6:	b508      	push	{r3, lr}
 80019a8:	8889      	ldrh	r1, [r1, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	b2c9      	uxtb	r1, r1
 80019ae:	f7ff fdd7 	bl	8001560 <usbd_ep_stall_set>
 80019b2:	2001      	movs	r0, #1
 80019b4:	bd08      	pop	{r3, pc}

080019b6 <usb_standard_endpoint_unstall>:
 80019b6:	b508      	push	{r3, lr}
 80019b8:	8889      	ldrh	r1, [r1, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	b2c9      	uxtb	r1, r1
 80019be:	f7ff fdcf 	bl	8001560 <usbd_ep_stall_set>
 80019c2:	2001      	movs	r0, #1
 80019c4:	bd08      	pop	{r3, pc}

080019c6 <usb_standard_set_interface>:
 80019c6:	220d      	movs	r2, #13
 80019c8:	b570      	push	{r4, r5, r6, lr}
 80019ca:	461c      	mov	r4, r3
 80019cc:	7dc3      	ldrb	r3, [r0, #23]
 80019ce:	435a      	muls	r2, r3
 80019d0:	6843      	ldr	r3, [r0, #4]
 80019d2:	3a0d      	subs	r2, #13
 80019d4:	4413      	add	r3, r2
 80019d6:	791d      	ldrb	r5, [r3, #4]
 80019d8:	888a      	ldrh	r2, [r1, #4]
 80019da:	4295      	cmp	r5, r2
 80019dc:	d919      	bls.n	8001a12 <usb_standard_set_interface+0x4c>
 80019de:	f8d3 5009 	ldr.w	r5, [r3, #9]
 80019e2:	0116      	lsls	r6, r2, #4
 80019e4:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80019e8:	884b      	ldrh	r3, [r1, #2]
 80019ea:	7912      	ldrb	r2, [r2, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d910      	bls.n	8001a12 <usb_standard_set_interface+0x4c>
 80019f0:	59aa      	ldr	r2, [r5, r6]
 80019f2:	b152      	cbz	r2, 8001a0a <usb_standard_set_interface+0x44>
 80019f4:	7013      	strb	r3, [r2, #0]
 80019f6:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80019fa:	b113      	cbz	r3, 8001a02 <usb_standard_set_interface+0x3c>
 80019fc:	884a      	ldrh	r2, [r1, #2]
 80019fe:	8889      	ldrh	r1, [r1, #4]
 8001a00:	4798      	blx	r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	2001      	movs	r0, #1
 8001a06:	8023      	strh	r3, [r4, #0]
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f3      	beq.n	80019f6 <usb_standard_set_interface+0x30>
 8001a0e:	4610      	mov	r0, r2
 8001a10:	e7fa      	b.n	8001a08 <usb_standard_set_interface+0x42>
 8001a12:	2000      	movs	r0, #0
 8001a14:	e7f8      	b.n	8001a08 <usb_standard_set_interface+0x42>

08001a16 <usb_standard_get_descriptor>:
 8001a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1a:	461f      	mov	r7, r3
 8001a1c:	884b      	ldrh	r3, [r1, #2]
 8001a1e:	4606      	mov	r6, r0
 8001a20:	0a18      	lsrs	r0, r3, #8
 8001a22:	2802      	cmp	r0, #2
 8001a24:	4614      	mov	r4, r2
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	d010      	beq.n	8001a4c <usb_standard_get_descriptor+0x36>
 8001a2a:	2803      	cmp	r0, #3
 8001a2c:	f000 80ed 	beq.w	8001c0a <usb_standard_get_descriptor+0x1f4>
 8001a30:	2801      	cmp	r0, #1
 8001a32:	f040 8123 	bne.w	8001c7c <usb_standard_get_descriptor+0x266>
 8001a36:	6833      	ldr	r3, [r6, #0]
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	883a      	ldrh	r2, [r7, #0]
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	bf28      	it	cs
 8001a42:	4613      	movcs	r3, r2
 8001a44:	803b      	strh	r3, [r7, #0]
 8001a46:	b009      	add	sp, #36	; 0x24
 8001a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a4c:	f04f 080d 	mov.w	r8, #13
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	fb08 f803 	mul.w	r8, r8, r3
 8001a56:	6932      	ldr	r2, [r6, #16]
 8001a58:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8001a5c:	6022      	str	r2, [r4, #0]
 8001a5e:	f819 5008 	ldrb.w	r5, [r9, r8]
 8001a62:	883c      	ldrh	r4, [r7, #0]
 8001a64:	eb09 0308 	add.w	r3, r9, r8
 8001a68:	42a5      	cmp	r5, r4
 8001a6a:	bf28      	it	cs
 8001a6c:	4625      	movcs	r5, r4
 8001a6e:	9202      	str	r2, [sp, #8]
 8001a70:	4619      	mov	r1, r3
 8001a72:	462a      	mov	r2, r5
 8001a74:	9802      	ldr	r0, [sp, #8]
 8001a76:	9303      	str	r3, [sp, #12]
 8001a78:	f000 fc9a 	bl	80023b0 <memcpy>
 8001a7c:	9b02      	ldr	r3, [sp, #8]
 8001a7e:	1b64      	subs	r4, r4, r5
 8001a80:	195e      	adds	r6, r3, r5
 8001a82:	2300      	movs	r3, #0
 8001a84:	f819 8008 	ldrb.w	r8, [r9, r8]
 8001a88:	b2a4      	uxth	r4, r4
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	9b03      	ldr	r3, [sp, #12]
 8001a8e:	791a      	ldrb	r2, [r3, #4]
 8001a90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d805      	bhi.n	8001aa4 <usb_standard_get_descriptor+0x8e>
 8001a98:	9b02      	ldr	r3, [sp, #8]
 8001a9a:	f8a3 8002 	strh.w	r8, [r3, #2]
 8001a9e:	803d      	strh	r5, [r7, #0]
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	e7d0      	b.n	8001a46 <usb_standard_get_descriptor+0x30>
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	9a01      	ldr	r2, [sp, #4]
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	9305      	str	r3, [sp, #20]
 8001aac:	9b03      	ldr	r3, [sp, #12]
 8001aae:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001ab2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001ab6:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8001aba:	f1ba 0f00 	cmp.w	sl, #0
 8001abe:	d014      	beq.n	8001aea <usb_standard_get_descriptor+0xd4>
 8001ac0:	f89a 9000 	ldrb.w	r9, [sl]
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	45a1      	cmp	r9, r4
 8001ac8:	bf28      	it	cs
 8001aca:	46a1      	movcs	r9, r4
 8001acc:	4651      	mov	r1, sl
 8001ace:	464a      	mov	r2, r9
 8001ad0:	f000 fc6e 	bl	80023b0 <memcpy>
 8001ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ad8:	eba4 0409 	sub.w	r4, r4, r9
 8001adc:	444d      	add	r5, r9
 8001ade:	4498      	add	r8, r3
 8001ae0:	444e      	add	r6, r9
 8001ae2:	b2a4      	uxth	r4, r4
 8001ae4:	b2ad      	uxth	r5, r5
 8001ae6:	fa1f f888 	uxth.w	r8, r8
 8001aea:	2300      	movs	r3, #0
 8001aec:	9304      	str	r3, [sp, #16]
 8001aee:	9b03      	ldr	r3, [sp, #12]
 8001af0:	9a05      	ldr	r2, [sp, #20]
 8001af2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001af6:	4413      	add	r3, r2
 8001af8:	7919      	ldrb	r1, [r3, #4]
 8001afa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8001afe:	4291      	cmp	r1, r2
 8001b00:	d802      	bhi.n	8001b08 <usb_standard_get_descriptor+0xf2>
 8001b02:	9b01      	ldr	r3, [sp, #4]
 8001b04:	3301      	adds	r3, #1
 8001b06:	e7c0      	b.n	8001a8a <usb_standard_get_descriptor+0x74>
 8001b08:	2115      	movs	r1, #21
 8001b0a:	9a04      	ldr	r2, [sp, #16]
 8001b0c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8001b10:	fb01 f902 	mul.w	r9, r1, r2
 8001b14:	f81a b009 	ldrb.w	fp, [sl, r9]
 8001b18:	eb0a 0309 	add.w	r3, sl, r9
 8001b1c:	45a3      	cmp	fp, r4
 8001b1e:	bf28      	it	cs
 8001b20:	46a3      	movcs	fp, r4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4630      	mov	r0, r6
 8001b26:	465a      	mov	r2, fp
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	f000 fc41 	bl	80023b0 <memcpy>
 8001b2e:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8001b32:	eba4 040b 	sub.w	r4, r4, fp
 8001b36:	4498      	add	r8, r3
 8001b38:	9b00      	ldr	r3, [sp, #0]
 8001b3a:	445d      	add	r5, fp
 8001b3c:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8001b40:	445e      	add	r6, fp
 8001b42:	b2a4      	uxth	r4, r4
 8001b44:	b2ad      	uxth	r5, r5
 8001b46:	fa1f f888 	uxth.w	r8, r8
 8001b4a:	b1b1      	cbz	r1, 8001b7a <usb_standard_get_descriptor+0x164>
 8001b4c:	f8d3 a011 	ldr.w	sl, [r3, #17]
 8001b50:	4630      	mov	r0, r6
 8001b52:	45a2      	cmp	sl, r4
 8001b54:	bfa8      	it	ge
 8001b56:	46a2      	movge	sl, r4
 8001b58:	fa1f f98a 	uxth.w	r9, sl
 8001b5c:	464a      	mov	r2, r9
 8001b5e:	f000 fc27 	bl	80023b0 <memcpy>
 8001b62:	9b00      	ldr	r3, [sp, #0]
 8001b64:	eba4 0409 	sub.w	r4, r4, r9
 8001b68:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8001b6c:	444d      	add	r5, r9
 8001b6e:	4498      	add	r8, r3
 8001b70:	444e      	add	r6, r9
 8001b72:	b2a4      	uxth	r4, r4
 8001b74:	b2ad      	uxth	r5, r5
 8001b76:	fa1f f888 	uxth.w	r8, r8
 8001b7a:	f04f 0900 	mov.w	r9, #0
 8001b7e:	9b00      	ldr	r3, [sp, #0]
 8001b80:	791a      	ldrb	r2, [r3, #4]
 8001b82:	fa1f f389 	uxth.w	r3, r9
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d802      	bhi.n	8001b90 <usb_standard_get_descriptor+0x17a>
 8001b8a:	9b04      	ldr	r3, [sp, #16]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	e7ad      	b.n	8001aec <usb_standard_get_descriptor+0xd6>
 8001b90:	9b00      	ldr	r3, [sp, #0]
 8001b92:	ebc9 1b09 	rsb	fp, r9, r9, lsl #4
 8001b96:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	f813 200b 	ldrb.w	r2, [r3, fp]
 8001ba0:	eb03 0a0b 	add.w	sl, r3, fp
 8001ba4:	42a2      	cmp	r2, r4
 8001ba6:	bf28      	it	cs
 8001ba8:	4622      	movcs	r2, r4
 8001baa:	4651      	mov	r1, sl
 8001bac:	9307      	str	r3, [sp, #28]
 8001bae:	9206      	str	r2, [sp, #24]
 8001bb0:	f000 fbfe 	bl	80023b0 <memcpy>
 8001bb4:	9b07      	ldr	r3, [sp, #28]
 8001bb6:	9a06      	ldr	r2, [sp, #24]
 8001bb8:	f813 300b 	ldrb.w	r3, [r3, fp]
 8001bbc:	f8da 1007 	ldr.w	r1, [sl, #7]
 8001bc0:	1aa4      	subs	r4, r4, r2
 8001bc2:	4415      	add	r5, r2
 8001bc4:	4498      	add	r8, r3
 8001bc6:	4416      	add	r6, r2
 8001bc8:	b2a4      	uxth	r4, r4
 8001bca:	b2ad      	uxth	r5, r5
 8001bcc:	fa1f f888 	uxth.w	r8, r8
 8001bd0:	b1c1      	cbz	r1, 8001c04 <usb_standard_get_descriptor+0x1ee>
 8001bd2:	f8da 200b 	ldr.w	r2, [sl, #11]
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	42a2      	cmp	r2, r4
 8001bda:	bfa8      	it	ge
 8001bdc:	4622      	movge	r2, r4
 8001bde:	fa1f fb82 	uxth.w	fp, r2
 8001be2:	465a      	mov	r2, fp
 8001be4:	f8cd b018 	str.w	fp, [sp, #24]
 8001be8:	f000 fbe2 	bl	80023b0 <memcpy>
 8001bec:	f8da 300b 	ldr.w	r3, [sl, #11]
 8001bf0:	9a06      	ldr	r2, [sp, #24]
 8001bf2:	eba4 040b 	sub.w	r4, r4, fp
 8001bf6:	445d      	add	r5, fp
 8001bf8:	4498      	add	r8, r3
 8001bfa:	4416      	add	r6, r2
 8001bfc:	b2a4      	uxth	r4, r4
 8001bfe:	b2ad      	uxth	r5, r5
 8001c00:	fa1f f888 	uxth.w	r8, r8
 8001c04:	f109 0901 	add.w	r9, r9, #1
 8001c08:	e7b9      	b.n	8001b7e <usb_standard_get_descriptor+0x168>
 8001c0a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001c0e:	6935      	ldr	r5, [r6, #16]
 8001c10:	d10d      	bne.n	8001c2e <usb_standard_get_descriptor+0x218>
 8001c12:	2309      	movs	r3, #9
 8001c14:	70ab      	strb	r3, [r5, #2]
 8001c16:	2304      	movs	r3, #4
 8001c18:	70eb      	strb	r3, [r5, #3]
 8001c1a:	702b      	strb	r3, [r5, #0]
 8001c1c:	883b      	ldrh	r3, [r7, #0]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	803b      	strh	r3, [r7, #0]
 8001c26:	2303      	movs	r3, #3
 8001c28:	706b      	strb	r3, [r5, #1]
 8001c2a:	6025      	str	r5, [r4, #0]
 8001c2c:	e738      	b.n	8001aa0 <usb_standard_get_descriptor+0x8a>
 8001c2e:	68b0      	ldr	r0, [r6, #8]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	2800      	cmp	r0, #0
 8001c34:	f43f af07 	beq.w	8001a46 <usb_standard_get_descriptor+0x30>
 8001c38:	68f2      	ldr	r2, [r6, #12]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dd1e      	ble.n	8001c7c <usb_standard_get_descriptor+0x266>
 8001c3e:	f240 4209 	movw	r2, #1033	; 0x409
 8001c42:	8889      	ldrh	r1, [r1, #4]
 8001c44:	4291      	cmp	r1, r2
 8001c46:	d119      	bne.n	8001c7c <usb_standard_get_descriptor+0x266>
 8001c48:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f000 fbbd 	bl	80023cc <strlen>
 8001c52:	3001      	adds	r0, #1
 8001c54:	0040      	lsls	r0, r0, #1
 8001c56:	b2c0      	uxtb	r0, r0
 8001c58:	7028      	strb	r0, [r5, #0]
 8001c5a:	883b      	ldrh	r3, [r7, #0]
 8001c5c:	4298      	cmp	r0, r3
 8001c5e:	bf28      	it	cs
 8001c60:	4618      	movcs	r0, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	8038      	strh	r0, [r7, #0]
 8001c66:	883a      	ldrh	r2, [r7, #0]
 8001c68:	0852      	lsrs	r2, r2, #1
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	ddda      	ble.n	8001c26 <usb_standard_get_descriptor+0x210>
 8001c70:	5cf1      	ldrb	r1, [r6, r3]
 8001c72:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8001c76:	8051      	strh	r1, [r2, #2]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	e7f4      	b.n	8001c66 <usb_standard_get_descriptor+0x250>
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e6e2      	b.n	8001a46 <usb_standard_get_descriptor+0x30>

08001c80 <usb_standard_interface_get_status>:
 8001c80:	8819      	ldrh	r1, [r3, #0]
 8001c82:	2001      	movs	r0, #1
 8001c84:	2902      	cmp	r1, #2
 8001c86:	bf84      	itt	hi
 8001c88:	2102      	movhi	r1, #2
 8001c8a:	8019      	strhhi	r1, [r3, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	6811      	ldr	r1, [r2, #0]
 8001c90:	700b      	strb	r3, [r1, #0]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	7053      	strb	r3, [r2, #1]
 8001c96:	4770      	bx	lr

08001c98 <usbd_register_set_config_callback>:
 8001c98:	4602      	mov	r2, r0
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
 8001ca2:	f854 0b04 	ldr.w	r0, [r4], #4
 8001ca6:	b138      	cbz	r0, 8001cb8 <usbd_register_set_config_callback+0x20>
 8001ca8:	4288      	cmp	r0, r1
 8001caa:	d009      	beq.n	8001cc0 <usbd_register_set_config_callback+0x28>
 8001cac:	3301      	adds	r3, #1
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d1f7      	bne.n	8001ca2 <usbd_register_set_config_callback+0xa>
 8001cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb6:	bd10      	pop	{r4, pc}
 8001cb8:	3332      	adds	r3, #50	; 0x32
 8001cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001cbe:	e7fa      	b.n	8001cb6 <usbd_register_set_config_callback+0x1e>
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	e7f8      	b.n	8001cb6 <usbd_register_set_config_callback+0x1e>

08001cc4 <_usbd_standard_request_device>:
 8001cc4:	b410      	push	{r4}
 8001cc6:	784c      	ldrb	r4, [r1, #1]
 8001cc8:	2c09      	cmp	r4, #9
 8001cca:	d812      	bhi.n	8001cf2 <_usbd_standard_request_device+0x2e>
 8001ccc:	e8df f004 	tbb	[pc, r4]
 8001cd0:	1111110d 	.word	0x1111110d
 8001cd4:	110b0f11 	.word	0x110b0f11
 8001cd8:	0509      	.short	0x0509
 8001cda:	4c07      	ldr	r4, [pc, #28]	; (8001cf8 <_usbd_standard_request_device+0x34>)
 8001cdc:	46a4      	mov	ip, r4
 8001cde:	bc10      	pop	{r4}
 8001ce0:	4760      	bx	ip
 8001ce2:	4c06      	ldr	r4, [pc, #24]	; (8001cfc <_usbd_standard_request_device+0x38>)
 8001ce4:	e7fa      	b.n	8001cdc <_usbd_standard_request_device+0x18>
 8001ce6:	4c06      	ldr	r4, [pc, #24]	; (8001d00 <_usbd_standard_request_device+0x3c>)
 8001ce8:	e7f8      	b.n	8001cdc <_usbd_standard_request_device+0x18>
 8001cea:	4c06      	ldr	r4, [pc, #24]	; (8001d04 <_usbd_standard_request_device+0x40>)
 8001cec:	e7f6      	b.n	8001cdc <_usbd_standard_request_device+0x18>
 8001cee:	4c06      	ldr	r4, [pc, #24]	; (8001d08 <_usbd_standard_request_device+0x44>)
 8001cf0:	e7f4      	b.n	8001cdc <_usbd_standard_request_device+0x18>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	bc10      	pop	{r4}
 8001cf6:	4770      	bx	lr
 8001cf8:	0800187d 	.word	0x0800187d
 8001cfc:	0800190f 	.word	0x0800190f
 8001d00:	08001a17 	.word	0x08001a17
 8001d04:	08001965 	.word	0x08001965
 8001d08:	08001853 	.word	0x08001853

08001d0c <_usbd_standard_request_interface>:
 8001d0c:	b410      	push	{r4}
 8001d0e:	784c      	ldrb	r4, [r1, #1]
 8001d10:	2c0a      	cmp	r4, #10
 8001d12:	d006      	beq.n	8001d22 <_usbd_standard_request_interface+0x16>
 8001d14:	2c0b      	cmp	r4, #11
 8001d16:	d006      	beq.n	8001d26 <_usbd_standard_request_interface+0x1a>
 8001d18:	b93c      	cbnz	r4, 8001d2a <_usbd_standard_request_interface+0x1e>
 8001d1a:	4c05      	ldr	r4, [pc, #20]	; (8001d30 <_usbd_standard_request_interface+0x24>)
 8001d1c:	46a4      	mov	ip, r4
 8001d1e:	bc10      	pop	{r4}
 8001d20:	4760      	bx	ip
 8001d22:	4c04      	ldr	r4, [pc, #16]	; (8001d34 <_usbd_standard_request_interface+0x28>)
 8001d24:	e7fa      	b.n	8001d1c <_usbd_standard_request_interface+0x10>
 8001d26:	4c04      	ldr	r4, [pc, #16]	; (8001d38 <_usbd_standard_request_interface+0x2c>)
 8001d28:	e7f8      	b.n	8001d1c <_usbd_standard_request_interface+0x10>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	bc10      	pop	{r4}
 8001d2e:	4770      	bx	lr
 8001d30:	08001c81 	.word	0x08001c81
 8001d34:	08001931 	.word	0x08001931
 8001d38:	080019c7 	.word	0x080019c7

08001d3c <_usbd_standard_request_endpoint>:
 8001d3c:	b410      	push	{r4}
 8001d3e:	784c      	ldrb	r4, [r1, #1]
 8001d40:	2c01      	cmp	r4, #1
 8001d42:	d004      	beq.n	8001d4e <_usbd_standard_request_endpoint+0x12>
 8001d44:	2c03      	cmp	r4, #3
 8001d46:	d007      	beq.n	8001d58 <_usbd_standard_request_endpoint+0x1c>
 8001d48:	b91c      	cbnz	r4, 8001d52 <_usbd_standard_request_endpoint+0x16>
 8001d4a:	4c08      	ldr	r4, [pc, #32]	; (8001d6c <_usbd_standard_request_endpoint+0x30>)
 8001d4c:	e008      	b.n	8001d60 <_usbd_standard_request_endpoint+0x24>
 8001d4e:	884c      	ldrh	r4, [r1, #2]
 8001d50:	b14c      	cbz	r4, 8001d66 <_usbd_standard_request_endpoint+0x2a>
 8001d52:	2000      	movs	r0, #0
 8001d54:	bc10      	pop	{r4}
 8001d56:	4770      	bx	lr
 8001d58:	884c      	ldrh	r4, [r1, #2]
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	d1f9      	bne.n	8001d52 <_usbd_standard_request_endpoint+0x16>
 8001d5e:	4c04      	ldr	r4, [pc, #16]	; (8001d70 <_usbd_standard_request_endpoint+0x34>)
 8001d60:	46a4      	mov	ip, r4
 8001d62:	bc10      	pop	{r4}
 8001d64:	4760      	bx	ip
 8001d66:	4c03      	ldr	r4, [pc, #12]	; (8001d74 <_usbd_standard_request_endpoint+0x38>)
 8001d68:	e7fa      	b.n	8001d60 <_usbd_standard_request_endpoint+0x24>
 8001d6a:	bf00      	nop
 8001d6c:	0800197d 	.word	0x0800197d
 8001d70:	080019a7 	.word	0x080019a7
 8001d74:	080019b7 	.word	0x080019b7

08001d78 <_usbd_standard_request>:
 8001d78:	b410      	push	{r4}
 8001d7a:	780c      	ldrb	r4, [r1, #0]
 8001d7c:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001d80:	d10f      	bne.n	8001da2 <_usbd_standard_request+0x2a>
 8001d82:	f004 041f 	and.w	r4, r4, #31
 8001d86:	2c01      	cmp	r4, #1
 8001d88:	d005      	beq.n	8001d96 <_usbd_standard_request+0x1e>
 8001d8a:	2c02      	cmp	r4, #2
 8001d8c:	d006      	beq.n	8001d9c <_usbd_standard_request+0x24>
 8001d8e:	b944      	cbnz	r4, 8001da2 <_usbd_standard_request+0x2a>
 8001d90:	bc10      	pop	{r4}
 8001d92:	f7ff bf97 	b.w	8001cc4 <_usbd_standard_request_device>
 8001d96:	bc10      	pop	{r4}
 8001d98:	f7ff bfb8 	b.w	8001d0c <_usbd_standard_request_interface>
 8001d9c:	bc10      	pop	{r4}
 8001d9e:	f7ff bfcd 	b.w	8001d3c <_usbd_standard_request_endpoint>
 8001da2:	2000      	movs	r0, #0
 8001da4:	bc10      	pop	{r4}
 8001da6:	4770      	bx	lr

08001da8 <st_usbfs_v1_usbd_init>:
 8001da8:	b508      	push	{r3, lr}
 8001daa:	f240 3097 	movw	r0, #919	; 0x397
 8001dae:	f7ff fb19 	bl	80013e4 <rcc_periph_clock_enable>
 8001db2:	2300      	movs	r3, #0
 8001db4:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <st_usbfs_v1_usbd_init+0x24>)
 8001db6:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <st_usbfs_v1_usbd_init+0x28>)
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	f841 3c0c 	str.w	r3, [r1, #-12]
 8001dc0:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <st_usbfs_v1_usbd_init+0x2c>)
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	bd08      	pop	{r3, pc}
 8001dca:	bf00      	nop
 8001dcc:	40005c40 	.word	0x40005c40
 8001dd0:	40005c50 	.word	0x40005c50
 8001dd4:	20000128 	.word	0x20000128

08001dd8 <st_usbfs_copy_to_pm>:
 8001dd8:	3201      	adds	r2, #1
 8001dda:	1052      	asrs	r2, r2, #1
 8001ddc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001de0:	4291      	cmp	r1, r2
 8001de2:	d100      	bne.n	8001de6 <st_usbfs_copy_to_pm+0xe>
 8001de4:	4770      	bx	lr
 8001de6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001dea:	f840 3b04 	str.w	r3, [r0], #4
 8001dee:	e7f7      	b.n	8001de0 <st_usbfs_copy_to_pm+0x8>

08001df0 <st_usbfs_copy_from_pm>:
 8001df0:	4603      	mov	r3, r0
 8001df2:	b570      	push	{r4, r5, r6, lr}
 8001df4:	f002 0401 	and.w	r4, r2, #1
 8001df8:	0852      	lsrs	r2, r2, #1
 8001dfa:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8001dfe:	42a9      	cmp	r1, r5
 8001e00:	d104      	bne.n	8001e0c <st_usbfs_copy_from_pm+0x1c>
 8001e02:	b114      	cbz	r4, 8001e0a <st_usbfs_copy_from_pm+0x1a>
 8001e04:	780b      	ldrb	r3, [r1, #0]
 8001e06:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	f831 6b04 	ldrh.w	r6, [r1], #4
 8001e10:	f823 6b02 	strh.w	r6, [r3], #2
 8001e14:	e7f3      	b.n	8001dfe <st_usbfs_copy_from_pm+0xe>
	...

08001e18 <systick_set_reload>:
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <systick_set_reload+0xc>)
 8001e1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001e1e:	6018      	str	r0, [r3, #0]
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e014 	.word	0xe000e014

08001e28 <systick_set_clocksource>:
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <systick_set_clocksource+0x14>)
 8001e2a:	f000 0004 	and.w	r0, r0, #4
 8001e2e:	6813      	ldr	r3, [r2, #0]
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	4303      	orrs	r3, r0
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <systick_interrupt_enable>:
 8001e40:	4a02      	ldr	r2, [pc, #8]	; (8001e4c <systick_interrupt_enable+0xc>)
 8001e42:	6813      	ldr	r3, [r2, #0]
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <systick_counter_enable>:
 8001e50:	4a02      	ldr	r2, [pc, #8]	; (8001e5c <systick_counter_enable+0xc>)
 8001e52:	6813      	ldr	r3, [r2, #0]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <nvic_enable_irq>:
 8001e60:	2201      	movs	r2, #1
 8001e62:	0943      	lsrs	r3, r0, #5
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001e6a:	f000 001f 	and.w	r0, r0, #31
 8001e6e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001e72:	fa02 f000 	lsl.w	r0, r2, r0
 8001e76:	6018      	str	r0, [r3, #0]
 8001e78:	4770      	bx	lr
	...

08001e7c <nvic_set_priority>:
 8001e7c:	2843      	cmp	r0, #67	; 0x43
 8001e7e:	bf93      	iteet	ls
 8001e80:	f100 4060 	addls.w	r0, r0, #3758096384	; 0xe0000000
 8001e84:	4b04      	ldrhi	r3, [pc, #16]	; (8001e98 <nvic_set_priority+0x1c>)
 8001e86:	f000 000f 	andhi.w	r0, r0, #15
 8001e8a:	f500 4064 	addls.w	r0, r0, #58368	; 0xe400
 8001e8e:	bf8c      	ite	hi
 8001e90:	54c1      	strbhi	r1, [r0, r3]
 8001e92:	7001      	strbls	r1, [r0, #0]
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed14 	.word	0xe000ed14

08001e9c <flash_set_ws>:
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <flash_set_ws+0x10>)
 8001e9e:	6813      	ldr	r3, [r2, #0]
 8001ea0:	f023 0307 	bic.w	r3, r3, #7
 8001ea4:	4303      	orrs	r3, r0
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40022000 	.word	0x40022000

08001eb0 <st_usbfs_set_address>:
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <st_usbfs_set_address+0xc>)
 8001eb2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001eb6:	6019      	str	r1, [r3, #0]
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40005c4c 	.word	0x40005c4c

08001ec0 <st_usbfs_set_ep_rx_bufsize>:
 8001ec0:	2a3e      	cmp	r2, #62	; 0x3e
 8001ec2:	d913      	bls.n	8001eec <st_usbfs_set_ep_rx_bufsize+0x2c>
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	f3c2 1344 	ubfx	r3, r2, #5, #5
 8001eca:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
 8001ece:	f102 0020 	add.w	r0, r2, #32
 8001ed2:	f043 0320 	orr.w	r3, r3, #32
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <st_usbfs_set_ep_rx_bufsize+0x38>)
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <st_usbfs_set_ep_rx_bufsize+0x3c>)
 8001ee6:	0049      	lsls	r1, r1, #1
 8001ee8:	5053      	str	r3, [r2, r1]
 8001eea:	4770      	bx	lr
 8001eec:	3201      	adds	r2, #1
 8001eee:	0853      	lsrs	r3, r2, #1
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	b290      	uxth	r0, r2
 8001ef6:	e7ee      	b.n	8001ed6 <st_usbfs_set_ep_rx_bufsize+0x16>
 8001ef8:	40005c50 	.word	0x40005c50
 8001efc:	4000600c 	.word	0x4000600c

08001f00 <st_usbfs_ep_setup>:
 8001f00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f04:	4606      	mov	r6, r0
 8001f06:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8001f0a:	4c43      	ldr	r4, [pc, #268]	; (8002018 <st_usbfs_ep_setup+0x118>)
 8001f0c:	f001 077f 	and.w	r7, r1, #127	; 0x7f
 8001f10:	e9cd 4000 	strd	r4, r0, [sp]
 8001f14:	00bc      	lsls	r4, r7, #2
 8001f16:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001f1a:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001f1e:	6820      	ldr	r0, [r4, #0]
 8001f20:	ad02      	add	r5, sp, #8
 8001f22:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8001f26:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8001f2a:	4338      	orrs	r0, r7
 8001f2c:	b280      	uxth	r0, r0
 8001f2e:	6020      	str	r0, [r4, #0]
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001f36:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8001f3a:	f420 40ec 	bic.w	r0, r0, #30208	; 0x7600
 8001f3e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8001f42:	4310      	orrs	r0, r2
 8001f44:	b249      	sxtb	r1, r1
 8001f46:	b280      	uxth	r0, r0
 8001f48:	2900      	cmp	r1, #0
 8001f4a:	6020      	str	r0, [r4, #0]
 8001f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f50:	4832      	ldr	r0, [pc, #200]	; (800201c <st_usbfs_ep_setup+0x11c>)
 8001f52:	ea4f 0cc7 	mov.w	ip, r7, lsl #3
 8001f56:	db2a      	blt.n	8001fae <st_usbfs_ep_setup+0xae>
 8001f58:	b34f      	cbz	r7, 8001fae <st_usbfs_ep_setup+0xae>
 8001f5a:	6802      	ldr	r2, [r0, #0]
 8001f5c:	8b31      	ldrh	r1, [r6, #24]
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	4494      	add	ip, r2
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <st_usbfs_ep_setup+0x120>)
 8001f64:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001f68:	f842 100c 	str.w	r1, [r2, ip]
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4639      	mov	r1, r7
 8001f72:	f7ff ffa5 	bl	8001ec0 <st_usbfs_set_ep_rx_bufsize>
 8001f76:	f1b8 0f00 	cmp.w	r8, #0
 8001f7a:	d146      	bne.n	800200a <st_usbfs_ep_setup+0x10a>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 8001f82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f86:	041b      	lsls	r3, r3, #16
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	6023      	str	r3, [r4, #0]
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	8b33      	ldrh	r3, [r6, #24]
 8001fa8:	4418      	add	r0, r3
 8001faa:	8330      	strh	r0, [r6, #24]
 8001fac:	e02a      	b.n	8002004 <st_usbfs_ep_setup+0x104>
 8001fae:	6805      	ldr	r5, [r0, #0]
 8001fb0:	8b32      	ldrh	r2, [r6, #24]
 8001fb2:	b2ad      	uxth	r5, r5
 8001fb4:	4465      	add	r5, ip
 8001fb6:	006d      	lsls	r5, r5, #1
 8001fb8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001fbc:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
 8001fc0:	602a      	str	r2, [r5, #0]
 8001fc2:	f1b8 0f00 	cmp.w	r8, #0
 8001fc6:	d004      	beq.n	8001fd2 <st_usbfs_ep_setup+0xd2>
 8001fc8:	250c      	movs	r5, #12
 8001fca:	fb05 6507 	mla	r5, r5, r7, r6
 8001fce:	f8c5 8068 	str.w	r8, [r5, #104]	; 0x68
 8001fd2:	6825      	ldr	r5, [r4, #0]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 8001fda:	f025 0530 	bic.w	r5, r5, #48	; 0x30
 8001fde:	042d      	lsls	r5, r5, #16
 8001fe0:	0c2d      	lsrs	r5, r5, #16
 8001fe2:	6025      	str	r5, [r4, #0]
 8001fe4:	6825      	ldr	r5, [r4, #0]
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 8001fec:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8001ff0:	b2ad      	uxth	r5, r5
 8001ff2:	f085 0520 	eor.w	r5, r5, #32
 8001ff6:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8001ffa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001ffe:	6025      	str	r5, [r4, #0]
 8002000:	8332      	strh	r2, [r6, #24]
 8002002:	daaa      	bge.n	8001f5a <st_usbfs_ep_setup+0x5a>
 8002004:	b002      	add	sp, #8
 8002006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800200a:	210c      	movs	r1, #12
 800200c:	fb01 6707 	mla	r7, r1, r7, r6
 8002010:	f8c7 806c 	str.w	r8, [r7, #108]	; 0x6c
 8002014:	e7b2      	b.n	8001f7c <st_usbfs_ep_setup+0x7c>
 8002016:	bf00      	nop
 8002018:	04000200 	.word	0x04000200
 800201c:	40005c50 	.word	0x40005c50
 8002020:	40006008 	.word	0x40006008

08002024 <st_usbfs_endpoints_reset>:
 8002024:	f248 0180 	movw	r1, #32896	; 0x8080
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <st_usbfs_endpoints_reset+0x34>)
 800202c:	4e0b      	ldr	r6, [pc, #44]	; (800205c <st_usbfs_endpoints_reset+0x38>)
 800202e:	4d0c      	ldr	r5, [pc, #48]	; (8002060 <st_usbfs_endpoints_reset+0x3c>)
 8002030:	4c0c      	ldr	r4, [pc, #48]	; (8002064 <st_usbfs_endpoints_reset+0x40>)
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	4033      	ands	r3, r6
 8002036:	430b      	orrs	r3, r1
 8002038:	b29b      	uxth	r3, r3
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	402b      	ands	r3, r5
 8002040:	430b      	orrs	r3, r1
 8002042:	b29b      	uxth	r3, r3
 8002044:	f842 3b04 	str.w	r3, [r2], #4
 8002048:	42a2      	cmp	r2, r4
 800204a:	d1f2      	bne.n	8002032 <st_usbfs_endpoints_reset+0xe>
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	79db      	ldrb	r3, [r3, #7]
 8002050:	3320      	adds	r3, #32
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	8303      	strh	r3, [r0, #24]
 8002056:	bd70      	pop	{r4, r5, r6, pc}
 8002058:	40005c04 	.word	0x40005c04
 800205c:	ffff8fbf 	.word	0xffff8fbf
 8002060:	ffffbf8f 	.word	0xffffbf8f
 8002064:	40005c20 	.word	0x40005c20

08002068 <st_usbfs_ep_stall_set>:
 8002068:	b510      	push	{r4, lr}
 800206a:	2900      	cmp	r1, #0
 800206c:	d133      	bne.n	80020d6 <st_usbfs_ep_stall_set+0x6e>
 800206e:	2a00      	cmp	r2, #0
 8002070:	bf14      	ite	ne
 8002072:	2410      	movne	r4, #16
 8002074:	2420      	moveq	r4, #32
 8002076:	482b      	ldr	r0, [pc, #172]	; (8002124 <st_usbfs_ep_stall_set+0xbc>)
 8002078:	6803      	ldr	r3, [r0, #0]
 800207a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800207e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002082:	4063      	eors	r3, r4
 8002084:	b21b      	sxth	r3, r3
 8002086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208e:	b29b      	uxth	r3, r3
 8002090:	6003      	str	r3, [r0, #0]
 8002092:	0089      	lsls	r1, r1, #2
 8002094:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002098:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800209c:	b93a      	cbnz	r2, 80020ae <st_usbfs_ep_stall_set+0x46>
 800209e:	680b      	ldr	r3, [r1, #0]
 80020a0:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 80020a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020a8:	041b      	lsls	r3, r3, #16
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	600b      	str	r3, [r1, #0]
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	bf14      	ite	ne
 80020b2:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 80020b6:	f44f 5240 	moveq.w	r2, #12288	; 0x3000
 80020ba:	680b      	ldr	r3, [r1, #0]
 80020bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c4:	4053      	eors	r3, r2
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	600b      	str	r3, [r1, #0]
 80020d4:	e024      	b.n	8002120 <st_usbfs_ep_stall_set+0xb8>
 80020d6:	060b      	lsls	r3, r1, #24
 80020d8:	d5db      	bpl.n	8002092 <st_usbfs_ep_stall_set+0x2a>
 80020da:	2a00      	cmp	r2, #0
 80020dc:	bf14      	ite	ne
 80020de:	2210      	movne	r2, #16
 80020e0:	2220      	moveq	r2, #32
 80020e2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80020e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020ee:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80020f8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80020fc:	ea82 0201 	eor.w	r2, r2, r1
 8002100:	b212      	sxth	r2, r2
 8002102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800210a:	b292      	uxth	r2, r2
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	d107      	bne.n	8002120 <st_usbfs_ep_stall_set+0xb8>
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002116:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800211a:	0412      	lsls	r2, r2, #16
 800211c:	0c12      	lsrs	r2, r2, #16
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	bd10      	pop	{r4, pc}
 8002122:	bf00      	nop
 8002124:	40005c00 	.word	0x40005c00

08002128 <st_usbfs_ep_stall_get>:
 8002128:	060b      	lsls	r3, r1, #24
 800212a:	d50e      	bpl.n	800214a <st_usbfs_ep_stall_get+0x22>
 800212c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002130:	0089      	lsls	r1, r1, #2
 8002132:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002136:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800213a:	6808      	ldr	r0, [r1, #0]
 800213c:	f000 0030 	and.w	r0, r0, #48	; 0x30
 8002140:	2810      	cmp	r0, #16
 8002142:	bf14      	ite	ne
 8002144:	2000      	movne	r0, #0
 8002146:	2001      	moveq	r0, #1
 8002148:	4770      	bx	lr
 800214a:	0089      	lsls	r1, r1, #2
 800214c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002150:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002154:	6808      	ldr	r0, [r1, #0]
 8002156:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
 800215a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800215e:	e7f0      	b.n	8002142 <st_usbfs_ep_stall_get+0x1a>

08002160 <st_usbfs_ep_nak_set>:
 8002160:	060b      	lsls	r3, r1, #24
 8002162:	d412      	bmi.n	800218a <st_usbfs_ep_nak_set+0x2a>
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <st_usbfs_ep_nak_set+0x34>)
 8002166:	480c      	ldr	r0, [pc, #48]	; (8002198 <st_usbfs_ep_nak_set+0x38>)
 8002168:	545a      	strb	r2, [r3, r1]
 800216a:	0089      	lsls	r1, r1, #2
 800216c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002170:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002174:	680b      	ldr	r3, [r1, #0]
 8002176:	4003      	ands	r3, r0
 8002178:	b29b      	uxth	r3, r3
 800217a:	b13a      	cbz	r2, 800218c <st_usbfs_ep_nak_set+0x2c>
 800217c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002188:	600b      	str	r3, [r1, #0]
 800218a:	4770      	bx	lr
 800218c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002190:	e7f6      	b.n	8002180 <st_usbfs_ep_nak_set+0x20>
 8002192:	bf00      	nop
 8002194:	20000224 	.word	0x20000224
 8002198:	ffffbf8f 	.word	0xffffbf8f

0800219c <st_usbfs_ep_write_packet>:
 800219c:	4608      	mov	r0, r1
 800219e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a0:	461d      	mov	r5, r3
 80021a2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80021a6:	009c      	lsls	r4, r3, #2
 80021a8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80021ac:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80021b0:	4611      	mov	r1, r2
 80021b2:	6822      	ldr	r2, [r4, #0]
 80021b4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80021b8:	2a30      	cmp	r2, #48	; 0x30
 80021ba:	d028      	beq.n	800220e <st_usbfs_ep_write_packet+0x72>
 80021bc:	4f15      	ldr	r7, [pc, #84]	; (8002214 <st_usbfs_ep_write_packet+0x78>)
 80021be:	462a      	mov	r2, r5
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	00de      	lsls	r6, r3, #3
 80021c4:	b280      	uxth	r0, r0
 80021c6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80021ca:	0040      	lsls	r0, r0, #1
 80021cc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80021d0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 80021d4:	8800      	ldrh	r0, [r0, #0]
 80021d6:	0040      	lsls	r0, r0, #1
 80021d8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80021dc:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 80021e0:	f7ff fdfa 	bl	8001dd8 <st_usbfs_copy_to_pm>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	441e      	add	r6, r3
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <st_usbfs_ep_write_packet+0x7c>)
 80021ec:	0076      	lsls	r6, r6, #1
 80021ee:	519d      	str	r5, [r3, r6]
 80021f0:	6821      	ldr	r1, [r4, #0]
 80021f2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80021f6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80021fa:	b289      	uxth	r1, r1
 80021fc:	f081 0130 	eor.w	r1, r1, #48	; 0x30
 8002200:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002204:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002208:	6021      	str	r1, [r4, #0]
 800220a:	4628      	mov	r0, r5
 800220c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220e:	2500      	movs	r5, #0
 8002210:	e7fb      	b.n	800220a <st_usbfs_ep_write_packet+0x6e>
 8002212:	bf00      	nop
 8002214:	40005c50 	.word	0x40005c50
 8002218:	40006004 	.word	0x40006004

0800221c <st_usbfs_ep_read_packet>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	008d      	lsls	r5, r1, #2
 8002220:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002224:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8002228:	461c      	mov	r4, r3
 800222a:	682b      	ldr	r3, [r5, #0]
 800222c:	460e      	mov	r6, r1
 800222e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002232:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002236:	4610      	mov	r0, r2
 8002238:	d03b      	beq.n	80022b2 <st_usbfs_ep_read_packet+0x96>
 800223a:	4f1f      	ldr	r7, [pc, #124]	; (80022b8 <st_usbfs_ep_read_packet+0x9c>)
 800223c:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <st_usbfs_ep_read_packet+0xa0>)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	00c9      	lsls	r1, r1, #3
 8002242:	b29b      	uxth	r3, r3
 8002244:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	58d3      	ldr	r3, [r2, r3]
 800224c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002250:	42a3      	cmp	r3, r4
 8002252:	da06      	bge.n	8002262 <st_usbfs_ep_read_packet+0x46>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	440b      	add	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	58d4      	ldr	r4, [r2, r3]
 800225e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4622      	mov	r2, r4
 8002266:	b29b      	uxth	r3, r3
 8002268:	4419      	add	r1, r3
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <st_usbfs_ep_read_packet+0xa4>)
 800226c:	0049      	lsls	r1, r1, #1
 800226e:	5a59      	ldrh	r1, [r3, r1]
 8002270:	0049      	lsls	r1, r1, #1
 8002272:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002276:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 800227a:	f7ff fdb9 	bl	8001df0 <st_usbfs_copy_from_pm>
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002284:	051b      	lsls	r3, r3, #20
 8002286:	0d1b      	lsrs	r3, r3, #20
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	602b      	str	r3, [r5, #0]
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <st_usbfs_ep_read_packet+0xa8>)
 8002290:	5d9b      	ldrb	r3, [r3, r6]
 8002292:	b963      	cbnz	r3, 80022ae <st_usbfs_ep_read_packet+0x92>
 8002294:	6829      	ldr	r1, [r5, #0]
 8002296:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800229a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800229e:	b289      	uxth	r1, r1
 80022a0:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80022a4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80022a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80022ac:	6029      	str	r1, [r5, #0]
 80022ae:	4620      	mov	r0, r4
 80022b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b2:	2400      	movs	r4, #0
 80022b4:	e7fb      	b.n	80022ae <st_usbfs_ep_read_packet+0x92>
 80022b6:	bf00      	nop
 80022b8:	40005c50 	.word	0x40005c50
 80022bc:	4000600c 	.word	0x4000600c
 80022c0:	40006008 	.word	0x40006008
 80022c4:	20000224 	.word	0x20000224

080022c8 <st_usbfs_poll>:
 80022c8:	4a37      	ldr	r2, [pc, #220]	; (80023a8 <st_usbfs_poll+0xe0>)
 80022ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	4604      	mov	r4, r0
 80022d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022d6:	4616      	mov	r6, r2
 80022d8:	b29f      	uxth	r7, r3
 80022da:	d008      	beq.n	80022ee <st_usbfs_poll+0x26>
 80022dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022e0:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	2340      	movs	r3, #64	; 0x40
 80022e8:	8303      	strh	r3, [r0, #24]
 80022ea:	f7ff b912 	b.w	8001512 <_usbd_reset>
 80022ee:	041d      	lsls	r5, r3, #16
 80022f0:	d51f      	bpl.n	8002332 <st_usbfs_poll+0x6a>
 80022f2:	f003 080f 	and.w	r8, r3, #15
 80022f6:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80022fa:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80022fe:	f013 0310 	ands.w	r3, r3, #16
 8002302:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8002306:	d036      	beq.n	8002376 <st_usbfs_poll+0xae>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	0519      	lsls	r1, r3, #20
 800230c:	d53c      	bpl.n	8002388 <st_usbfs_poll+0xc0>
 800230e:	2308      	movs	r3, #8
 8002310:	4641      	mov	r1, r8
 8002312:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8002316:	f7ff ff81 	bl	800221c <st_usbfs_ep_read_packet>
 800231a:	2302      	movs	r3, #2
 800231c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8002320:	4413      	add	r3, r2
 8002322:	331a      	adds	r3, #26
 8002324:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d02f      	beq.n	800238c <st_usbfs_poll+0xc4>
 800232c:	4641      	mov	r1, r8
 800232e:	4620      	mov	r0, r4
 8002330:	4798      	blx	r3
 8002332:	053a      	lsls	r2, r7, #20
 8002334:	d505      	bpl.n	8002342 <st_usbfs_poll+0x7a>
 8002336:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800233a:	6033      	str	r3, [r6, #0]
 800233c:	6a23      	ldr	r3, [r4, #32]
 800233e:	b103      	cbz	r3, 8002342 <st_usbfs_poll+0x7a>
 8002340:	4798      	blx	r3
 8002342:	04fb      	lsls	r3, r7, #19
 8002344:	d505      	bpl.n	8002352 <st_usbfs_poll+0x8a>
 8002346:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800234a:	6033      	str	r3, [r6, #0]
 800234c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800234e:	b103      	cbz	r3, 8002352 <st_usbfs_poll+0x8a>
 8002350:	4798      	blx	r3
 8002352:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002356:	4d15      	ldr	r5, [pc, #84]	; (80023ac <st_usbfs_poll+0xe4>)
 8002358:	d005      	beq.n	8002366 <st_usbfs_poll+0x9e>
 800235a:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800235e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002360:	6032      	str	r2, [r6, #0]
 8002362:	b1e3      	cbz	r3, 800239e <st_usbfs_poll+0xd6>
 8002364:	4798      	blx	r3
 8002366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002368:	b1cb      	cbz	r3, 800239e <st_usbfs_poll+0xd6>
 800236a:	682b      	ldr	r3, [r5, #0]
 800236c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002370:	602b      	str	r3, [r5, #0]
 8002372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002376:	682a      	ldr	r2, [r5, #0]
 8002378:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800237c:	0512      	lsls	r2, r2, #20
 800237e:	0d12      	lsrs	r2, r2, #20
 8002380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002384:	602a      	str	r2, [r5, #0]
 8002386:	e7c9      	b.n	800231c <st_usbfs_poll+0x54>
 8002388:	2301      	movs	r3, #1
 800238a:	e7c7      	b.n	800231c <st_usbfs_poll+0x54>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002392:	051b      	lsls	r3, r3, #20
 8002394:	0d1b      	lsrs	r3, r3, #20
 8002396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239a:	602b      	str	r3, [r5, #0]
 800239c:	e7c9      	b.n	8002332 <st_usbfs_poll+0x6a>
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a4:	e7e4      	b.n	8002370 <st_usbfs_poll+0xa8>
 80023a6:	bf00      	nop
 80023a8:	40005c44 	.word	0x40005c44
 80023ac:	40005c40 	.word	0x40005c40

080023b0 <memcpy>:
 80023b0:	440a      	add	r2, r1
 80023b2:	4291      	cmp	r1, r2
 80023b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80023b8:	d100      	bne.n	80023bc <memcpy+0xc>
 80023ba:	4770      	bx	lr
 80023bc:	b510      	push	{r4, lr}
 80023be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023c2:	4291      	cmp	r1, r2
 80023c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023c8:	d1f9      	bne.n	80023be <memcpy+0xe>
 80023ca:	bd10      	pop	{r4, pc}

080023cc <strlen>:
 80023cc:	4603      	mov	r3, r0
 80023ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023d2:	2a00      	cmp	r2, #0
 80023d4:	d1fb      	bne.n	80023ce <strlen+0x2>
 80023d6:	1a18      	subs	r0, r3, r0
 80023d8:	3801      	subs	r0, #1
 80023da:	4770      	bx	lr

080023dc <image_data_font_fixedsys_mono_24_0x20>:
 80023dc:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 80023ec:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 80023fc:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

0800240c <font_fixedsys_mono_24_0x20>:
 800240c:	23dc 0800 000c 0019 0008 0000               .#..........

08002418 <image_data_font_fixedsys_mono_24_0x21>:
 8002418:	ffff 80ff ffff 80ff ffff 80ff 0fff 80ff     ................
 8002428:	0fff 80ff 01fc 808f 01fc 808f 01fc 808f     ................
 8002438:	0fff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

08002448 <font_fixedsys_mono_24_0x21>:
 8002448:	2418 0800 000c 0019 0008 0000               .$..........

08002454 <image_data_font_fixedsys_mono_24_0x22>:
 8002454:	ffff 80ff 3ffc 80ff 3ffc 80ff 3ffc 80ff     .....?...?...?..
 8002464:	ffff 80ff ffff 80ff ffff 80ff 3ffc 80ff     .............?..
 8002474:	3ffc 80ff 3ffc 80ff ffff 80ff ffff 80ff     .?...?..........

08002484 <font_fixedsys_mono_24_0x22>:
 8002484:	2454 0800 000c 0019 0008 0000               T$..........

08002490 <image_data_font_fixedsys_mono_24_0x23>:
 8002490:	ffff 80ff bfff 807f bfff 807f 00fc 800f     ................
 80024a0:	00fc 800f 00fc 800f bfff 807f bfff 807f     ................
 80024b0:	00fc 800f 00fc 800f 00fc 800f bfff 807f     ................

080024c0 <font_fixedsys_mono_24_0x23>:
 80024c0:	2490 0800 000c 0019 0008 0000               .$..........

080024cc <image_data_font_fixedsys_mono_24_0x24>:
 80024cc:	ffff 80ff 3ffe 80bf 3ffe 80bf 0ffc 808f     .....?...?......
 80024dc:	e3e1 80e1 e3e1 80e1 f1e1 80e1 fcfc 800f     ................
 80024ec:	fcfc 800f fefe 803f ffff 80ff ffff 80ff     ......?.........

080024fc <font_fixedsys_mono_24_0x24>:
 80024fc:	24cc 0800 000c 0019 0008 0000               .$..........

08002508 <image_data_font_fixedsys_mono_24_0x25>:
 8002508:	7ffc 80ff 3ef8 803f 3ef8 803f b8fb 80ff     .....>?..>?.....
 8002518:	b8fb 807f 11f8 808f 66fc 8007 66fc 8007     .........f...f..
 8002528:	8eff 80f7 3efe 8007 3efe 8007 ffff 808f     .....>...>......

08002538 <font_fixedsys_mono_24_0x25>:
 8002538:	2508 0800 000c 0019 0008 0000               .%..........

08002544 <image_data_font_fixedsys_mono_24_0x26>:
 8002544:	ffff 80ff 30fe 803f 00fc 800f 00fc 800f     .....0?.........
 8002554:	effd 80ef effd 80ef 0dfc 80cf 3cfe 803f     .............<?.
 8002564:	3cfe 803f fcff 800f fdff 80ef fdff 80ef     .<?.............

08002574 <font_fixedsys_mono_24_0x26>:
 8002574:	2544 0800 000c 0019 0008 0000               D%..........

08002580 <image_data_font_fixedsys_mono_24_0x27>:
 8002580:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002590:	3ffc 80ff 3ffc 80ff 3ffc 80ff ffff 80ff     .?...?...?......
 80025a0:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

080025b0 <font_fixedsys_mono_24_0x27>:
 80025b0:	2580 0800 000c 0019 0008 0000               .%..........

080025bc <image_data_font_fixedsys_mono_24_0x28>:
 80025bc:	ffff 80ff ffff 80ff ffff 80ff c0ff 803f     ..............?.
 80025cc:	c0ff 803f 00fe 8007 3ffc 80c3 3ffc 80c3     ..?......?...?..
 80025dc:	fffd 80fb ffff 80ff ffff 80ff ffff 80ff     ................

080025ec <font_fixedsys_mono_24_0x28>:
 80025ec:	25bc 0800 000c 0019 0008 0000               .%..........

080025f8 <image_data_font_fixedsys_mono_24_0x29>:
 80025f8:	ffff 80ff ffff 80ff ffff 80ff fffd 80fb     ................
 8002608:	fffd 80fb 3ffc 80c3 00fe 8007 00fe 8007     .....?..........
 8002618:	c0ff 803f ffff 80ff ffff 80ff ffff 80ff     ..?.............

08002628 <font_fixedsys_mono_24_0x29>:
 8002628:	25f8 0800 000c 0019 0008 0000               .%..........

08002634 <image_data_font_fixedsys_mono_24_0x2a>:
 8002634:	ffff 80ff f7ff 80ff f7ff 80ff b6ff 80ff     ................
 8002644:	80ff 80ff 80ff 80ff c3ff 80ff 80ff 80ff     ................
 8002654:	80ff 80ff b6ff 80ff f7ff 80ff f7ff 80ff     ................

08002664 <font_fixedsys_mono_24_0x2a>:
 8002664:	2634 0800 000c 0019 0008 0000               4&..........

08002670 <image_data_font_fixedsys_mono_24_0x2b>:
 8002670:	ffff 80ff fbff 80ff fbff 80ff fbff 80ff     ................
 8002680:	80ff 807f 80ff 807f 80ff 807f fbff 80ff     ................
 8002690:	fbff 80ff fbff 80ff ffff 80ff ffff 80ff     ................

080026a0 <font_fixedsys_mono_24_0x2b>:
 80026a0:	2670 0800 000c 0019 0008 0000               p&..........

080026ac <image_data_font_fixedsys_mono_24_0x2c>:
 80026ac:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 80026bc:	ffff 808d ffff 808d ffff 8081 ffff 8083     ................
 80026cc:	ffff 8083 ffff 80ff ffff 80ff ffff 80ff     ................

080026dc <font_fixedsys_mono_24_0x2c>:
 80026dc:	26ac 0800 000c 0019 0008 0000               .&..........

080026e8 <image_data_font_fixedsys_mono_24_0x2d>:
 80026e8:	ffff 80ff f7ff 80ff f7ff 80ff f7ff 80ff     ................
 80026f8:	f7ff 80ff f7ff 80ff f7ff 80ff f7ff 80ff     ................
 8002708:	f7ff 80ff f7ff 80ff ffff 80ff ffff 80ff     ................

08002718 <font_fixedsys_mono_24_0x2d>:
 8002718:	26e8 0800 000c 0019 0008 0000               .&..........

08002724 <image_data_font_fixedsys_mono_24_0x2e>:
 8002724:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002734:	ffff 808f ffff 808f ffff 808f ffff 808f     ................
 8002744:	ffff 808f ffff 80ff ffff 80ff ffff 80ff     ................

08002754 <font_fixedsys_mono_24_0x2e>:
 8002754:	2724 0800 000c 0019 0008 0000               $'..........

08002760 <image_data_font_fixedsys_mono_24_0x2f>:
 8002760:	ffff 80ff ffff 80c7 ffff 80c7 feff 8007     ................
 8002770:	f0ff 803f f0ff 803f 81ff 80ff 0ffc 80ff     ..?...?.........
 8002780:	0ffc 80ff 7ffc 80ff ffff 80ff ffff 80ff     ................

08002790 <font_fixedsys_mono_24_0x2f>:
 8002790:	2760 0800 000c 0019 0008 0000               `'..........

0800279c <image_data_font_fixedsys_mono_24_0x30>:
 800279c:	ffff 80ff ffff 80ff ffff 80ff 00fe 803f     ..............?.
 80027ac:	00fe 803f 00fc 800f fcfd 806f 8cfd 806f     ..?.......o...o.
 80027bc:	8ffd 80ef 00fc 800f 00fc 800f 00fe 803f     ..............?.

080027cc <font_fixedsys_mono_24_0x30>:
 80027cc:	279c 0800 000c 0019 0008 0000               .'..........

080027d8 <image_data_font_fixedsys_mono_24_0x31>:
 80027d8:	ffff 80ff bfff 80ff bfff 80ff bfff 80ff     ................
 80027e8:	3fff 80ff 3fff 80ff 00fc 800f 00fc 800f     .?...?..........
 80027f8:	00fc 800f ffff 80ff ffff 80ff ffff 80ff     ................

08002808 <font_fixedsys_mono_24_0x31>:
 8002808:	27d8 0800 000c 0019 0008 0000               .'..........

08002814 <image_data_font_fixedsys_mono_24_0x32>:
 8002814:	ffff 80ff 1fff 808f 1fff 808f 1efc 800f     ................
 8002824:	fcfd 806f fcfd 806f f1fd 80ef 03fc 80ef     ..o...o.........
 8002834:	03fc 80ef 0fff 80ef ffff 80ff ffff 80ff     ................

08002844 <font_fixedsys_mono_24_0x32>:
 8002844:	2814 0800 000c 0019 0008 0000               .(..........

08002850 <image_data_font_fixedsys_mono_24_0x33>:
 8002850:	ffff 80ff 1eff 803f 1eff 803f 1efc 800f     ......?...?.....
 8002860:	f7fd 80ef f7fd 80ef f7fd 80ef 00fc 800f     ................
 8002870:	00fc 800f 0cff 803f ffff 80ff ffff 80ff     ......?.........

08002880 <font_fixedsys_mono_24_0x33>:
 8002880:	2850 0800 000c 0019 0008 0000               P(..........

0800288c <image_data_font_fixedsys_mono_24_0x34>:
 800288c:	ffff 80ff fcff 807f fcff 807f 00fc 807f     ................
 800289c:	03fc 807f 03fc 807f ffff 807f 80ff 800f     ................
 80028ac:	80ff 800f 80ff 800f ffff 807f ffff 807f     ................

080028bc <font_fixedsys_mono_24_0x34>:
 80028bc:	288c 0800 000c 0019 0008 0000               .(..........

080028c8 <image_data_font_fixedsys_mono_24_0x35>:
 80028c8:	ffff 80ff 07fc 80ef 07fc 80ef 07fc 80ef     ................
 80028d8:	f7fd 80ef f7fd 80ef f7fd 808f f0fd 801f     ................
 80028e8:	f0fd 801f fcfd 807f ffff 80ff ffff 80ff     ................

080028f8 <font_fixedsys_mono_24_0x35>:
 80028f8:	28c8 0800 000c 0019 0008 0000               .(..........

08002904 <image_data_font_fixedsys_mono_24_0x36>:
 8002904:	ffff 80ff e0ff 803f e0ff 803f 80ff 800f     ......?...?.....
 8002914:	0ffc 80ef 0ffc 80ef 6ffc 80ef e0fd 800f     .........o......
 8002924:	e0fd 800f f0ff 803f ffff 80ff ffff 80ff     ......?.........

08002934 <font_fixedsys_mono_24_0x36>:
 8002934:	2904 0800 000c 0019 0008 0000               .)..........

08002940 <image_data_font_fixedsys_mono_24_0x37>:
 8002940:	ffff 80ff fffd 80ff fffd 80ff fffd 800f     ................
 8002950:	fffd 800f f0fd 800f 81fd 80ff 81fd 80ff     ................
 8002960:	0ffc 80ff 7ffc 80ff 7ffc 80ff ffff 80ff     ................

08002970 <font_fixedsys_mono_24_0x37>:
 8002970:	2940 0800 000c 0019 0008 0000               @)..........

0800297c <image_data_font_fixedsys_mono_24_0x38>:
 800297c:	ffff 80ff 0cff 803f 0cff 803f 00fc 800f     ......?...?.....
 800298c:	e3fd 80ef e1fd 80ef f1fd 80ef 00fc 800f     ................
 800299c:	00fc 800f 0cff 803f ffff 80ff ffff 80ff     ......?.........

080029ac <font_fixedsys_mono_24_0x38>:
 80029ac:	297c 0800 000c 0019 0008 0000               |)..........

080029b8 <image_data_font_fixedsys_mono_24_0x39>:
 80029b8:	ffff 80ff 03ff 80ff 03ff 80ff 01fc 80ef     ................
 80029c8:	fdfd 808f fdfd 808f fcfd 800f 00fc 807f     ................
 80029d8:	00fc 807f 01ff 80ff ffff 80ff ffff 80ff     ................

080029e8 <font_fixedsys_mono_24_0x39>:
 80029e8:	29b8 0800 000c 0019 0008 0000               .)..........

080029f4 <image_data_font_fixedsys_mono_24_0x3a>:
 80029f4:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002a04:	8fff 808f 8fff 808f 8fff 808f 8fff 808f     ................
 8002a14:	8fff 808f ffff 80ff ffff 80ff ffff 80ff     ................

08002a24 <font_fixedsys_mono_24_0x3a>:
 8002a24:	29f4 0800 000c 0019 0008 0000               .)..........

08002a30 <image_data_font_fixedsys_mono_24_0x3b>:
 8002a30:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 8002a40:	8fff 808d 8fff 808d 8fff 8081 8fff 8083     ................
 8002a50:	8fff 8083 ffff 80ff ffff 80ff ffff 80ff     ................

08002a60 <font_fixedsys_mono_24_0x3b>:
 8002a60:	2a30 0800 000c 0019 0008 0000               0*..........

08002a6c <image_data_font_fixedsys_mono_24_0x3c>:
 8002a6c:	ffff 80ff f7ff 80ff f7ff 80ff e1ff 80ff     ................
 8002a7c:	8cff 807f 8cff 807f 3efe 803f 7ffc 808f     .........>?.....
 8002a8c:	7ffc 808f fffd 80ef ffff 80ff ffff 80ff     ................

08002a9c <font_fixedsys_mono_24_0x3c>:
 8002a9c:	2a6c 0800 000c 0019 0008 0000               l*..........

08002aa8 <image_data_font_fixedsys_mono_24_0x3d>:
 8002aa8:	ffff 80ff edff 80ff edff 80ff edff 80ff     ................
 8002ab8:	edff 80ff edff 80ff edff 80ff edff 80ff     ................
 8002ac8:	edff 80ff edff 80ff ffff 80ff ffff 80ff     ................

08002ad8 <font_fixedsys_mono_24_0x3d>:
 8002ad8:	2aa8 0800 000c 0019 0008 0000               .*..........

08002ae4 <image_data_font_fixedsys_mono_24_0x3e>:
 8002ae4:	ffff 80ff fffd 80ef fffd 80ef 7ffc 808f     ................
 8002af4:	3efe 803f 3efe 803f 8cff 807f e1ff 80ff     .>?..>?.........
 8002b04:	e1ff 80ff f7ff 80ff ffff 80ff ffff 80ff     ................

08002b14 <font_fixedsys_mono_24_0x3e>:
 8002b14:	2ae4 0800 000c 0019 0008 0000               .*..........

08002b20 <image_data_font_fixedsys_mono_24_0x3f>:
 8002b20:	ffff 80ff 3ffe 80ff 3ffe 80ff 3ffc 80ff     .....?...?...?..
 8002b30:	f1fd 808f f1fd 808f c1fd 808f 0ffc 80ff     ................
 8002b40:	0ffc 80ff 3ffe 80ff ffff 80ff ffff 80ff     .....?..........

08002b50 <font_fixedsys_mono_24_0x3f>:
 8002b50:	2b20 0800 000c 0019 0008 0000                +..........

08002b5c <image_data_font_fixedsys_mono_24_0x40>:
 8002b5c:	00fe 803f 00fe 803f 00fc 800f fffd 80ef     ..?...?.........
 8002b6c:	fffd 80ef f1fd 80ef e0fd 806f e0fd 806f     ..........o...o.
 8002b7c:	effd 806f 00fc 806f 00fc 806f 00fe 806f     ..o...o...o...o.

08002b8c <font_fixedsys_mono_24_0x40>:
 8002b8c:	2b5c 0800 000c 0019 0008 0000               \+..........

08002b98 <image_data_font_fixedsys_mono_24_0x41>:
 8002b98:	ffff 80ff 80ff 800f 80ff 800f 00ff 800f     ................
 8002ba8:	7dfc 80ff 7dfc 80ff 7dfc 80ff 00fe 800f     .}...}...}......
 8002bb8:	00fe 800f 80ff 800f ffff 80ff ffff 80ff     ................

08002bc8 <font_fixedsys_mono_24_0x41>:
 8002bc8:	2b98 0800 000c 0019 0008 0000               .+..........

08002bd4 <image_data_font_fixedsys_mono_24_0x42>:
 8002bd4:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002be4:	f7fd 80ef f7fd 80ef f7fd 80ef 00fc 800f     ................
 8002bf4:	00fc 800f 0cff 803f ffff 80ff ffff 80ff     ......?.........

08002c04 <font_fixedsys_mono_24_0x42>:
 8002c04:	2bd4 0800 000c 0019 0008 0000               .+..........

08002c10 <image_data_font_fixedsys_mono_24_0x43>:
 8002c10:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002c20:	fffd 80ef fffd 80ef fffd 80ef 3efc 800f     .............>..
 8002c30:	3efc 800f 3efe 803f ffff 80ff ffff 80ff     .>...>?.........

08002c40 <font_fixedsys_mono_24_0x43>:
 8002c40:	2c10 0800 000c 0019 0008 0000               .,..........

08002c4c <image_data_font_fixedsys_mono_24_0x44>:
 8002c4c:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002c5c:	fffd 80ef fffd 80ef 7ffc 808f 00fe 803f     ..............?.
 8002c6c:	00fe 803f 80ff 807f ffff 80ff ffff 80ff     ..?.............

08002c7c <font_fixedsys_mono_24_0x44>:
 8002c7c:	2c4c 0800 000c 0019 0008 0000               L,..........

08002c88 <image_data_font_fixedsys_mono_24_0x45>:
 8002c88:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002c98:	f7fd 80ef f7fd 80ef f7fd 80ef f7fd 80ef     ................
 8002ca8:	f7fd 80ef fffd 80ef ffff 80ff ffff 80ff     ................

08002cb8 <font_fixedsys_mono_24_0x45>:
 8002cb8:	2c88 0800 000c 0019 0008 0000               .,..........

08002cc4 <image_data_font_fixedsys_mono_24_0x46>:
 8002cc4:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002cd4:	f7fd 80ff f7fd 80ff f7fd 80ff f7fd 80ff     ................
 8002ce4:	f7fd 80ff fffd 80ff ffff 80ff ffff 80ff     ................

08002cf4 <font_fixedsys_mono_24_0x46>:
 8002cf4:	2cc4 0800 000c 0019 0008 0000               .,..........

08002d00 <image_data_font_fixedsys_mono_24_0x47>:
 8002d00:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002d10:	fffd 80ef fdfd 80ef fdfd 80ef 3cfc 800f     .............<..
 8002d20:	3cfc 800f 3cfe 800f ffff 80ff ffff 80ff     .<...<..........

08002d30 <font_fixedsys_mono_24_0x47>:
 8002d30:	2d00 0800 000c 0019 0008 0000               .-..........

08002d3c <image_data_font_fixedsys_mono_24_0x48>:
 8002d3c:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002d4c:	f7ff 80ff f7ff 80ff f7ff 80ff 00fc 800f     ................
 8002d5c:	00fc 800f 00fc 800f ffff 80ff ffff 80ff     ................

08002d6c <font_fixedsys_mono_24_0x48>:
 8002d6c:	2d3c 0800 000c 0019 0008 0000               <-..........

08002d78 <image_data_font_fixedsys_mono_24_0x49>:
 8002d78:	ffff 80ff ffff 80ff ffff 80ff fffd 80ef     ................
 8002d88:	fffd 80ef 00fc 800f 00fc 800f 00fc 800f     ................
 8002d98:	fffd 80ef ffff 80ff ffff 80ff ffff 80ff     ................

08002da8 <font_fixedsys_mono_24_0x49>:
 8002da8:	2d78 0800 000c 0019 0008 0000               x-..........

08002db4 <image_data_font_fixedsys_mono_24_0x4a>:
 8002db4:	ffff 80ff feff 803f feff 803f feff 800f     ......?...?.....
 8002dc4:	ffff 80ef ffff 80ef ffff 80ef 00fc 800f     ................
 8002dd4:	00fc 800f 00fc 803f ffff 80ff ffff 80ff     ......?.........

08002de4 <font_fixedsys_mono_24_0x4a>:
 8002de4:	2db4 0800 000c 0019 0008 0000               .-..........

08002df0 <image_data_font_fixedsys_mono_24_0x4b>:
 8002df0:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002e00:	f7ff 80ff f7ff 80ff 80ff 807f 08fc 800f     ................
 8002e10:	08fc 800f 7ffc 808f ffff 80ff ffff 80ff     ................

08002e20 <font_fixedsys_mono_24_0x4b>:
 8002e20:	2df0 0800 000c 0019 0008 0000               .-..........

08002e2c <image_data_font_fixedsys_mono_24_0x4c>:
 8002e2c:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002e3c:	ffff 80ef ffff 80ef ffff 80ef ffff 80ef     ................
 8002e4c:	ffff 80ef ffff 80ef ffff 80ff ffff 80ff     ................

08002e5c <font_fixedsys_mono_24_0x4c>:
 8002e5c:	2e2c 0800 000c 0019 0008 0000               ,...........

08002e68 <image_data_font_fixedsys_mono_24_0x4d>:
 8002e68:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002e78:	9fff 80ff e1ff 80ff c1ff 80ff bfff 80ff     ................
 8002e88:	bfff 80ff 00fc 800f 00fc 800f 00fc 800f     ................

08002e98 <font_fixedsys_mono_24_0x4d>:
 8002e98:	2e68 0800 000c 0019 0008 0000               h...........

08002ea4 <image_data_font_fixedsys_mono_24_0x4e>:
 8002ea4:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002eb4:	8fff 80ff 8fff 80ff e3ff 80ff f1ff 80ff     ................
 8002ec4:	f1ff 80ff 00fc 800f 00fc 800f 00fc 800f     ................

08002ed4 <font_fixedsys_mono_24_0x4e>:
 8002ed4:	2ea4 0800 000c 0019 0008 0000               ............

08002ee0 <image_data_font_fixedsys_mono_24_0x4f>:
 8002ee0:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002ef0:	fffd 80ef fffd 80ef fffd 80ef 00fc 800f     ................
 8002f00:	00fc 800f 00fe 803f ffff 80ff ffff 80ff     ......?.........

08002f10 <font_fixedsys_mono_24_0x4f>:
 8002f10:	2ee0 0800 000c 0019 0008 0000               ............

08002f1c <image_data_font_fixedsys_mono_24_0x50>:
 8002f1c:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002f2c:	f7fd 80ff f7fd 80ff f7fd 80ff 07fc 80ff     ................
 8002f3c:	07fc 80ff 0fff 80ff ffff 80ff ffff 80ff     ................

08002f4c <font_fixedsys_mono_24_0x50>:
 8002f4c:	2f1c 0800 000c 0019 0008 0000               ./..........

08002f58 <image_data_font_fixedsys_mono_24_0x51>:
 8002f58:	ffff 80ff 00fe 803f 00fe 803f 00fc 800f     ......?...?.....
 8002f68:	fffd 80ef fffd 80ef fffd 80e3 00fc 8001     ................
 8002f78:	00fc 8001 00fe 803d ffff 80ff ffff 80ff     ......=.........

08002f88 <font_fixedsys_mono_24_0x51>:
 8002f88:	2f58 0800 000c 0019 0008 0000               X/..........

08002f94 <image_data_font_fixedsys_mono_24_0x52>:
 8002f94:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8002fa4:	f7fd 80ff f7fd 80ff f0fd 80ff 00fc 800f     ................
 8002fb4:	00fc 800f 0fff 800f ffff 80ff ffff 80ff     ................

08002fc4 <font_fixedsys_mono_24_0x52>:
 8002fc4:	2f94 0800 000c 0019 0008 0000               ./..........

08002fd0 <image_data_font_fixedsys_mono_24_0x53>:
 8002fd0:	ffff 80ff 3ffe 80bf 3ffe 80bf 0ffc 808f     .....?...?......
 8002fe0:	e3fd 80ef e3fd 80ef f1fd 80ef fcfc 800f     ................
 8002ff0:	fcfc 800f fefe 803f ffff 80ff ffff 80ff     ......?.........

08003000 <font_fixedsys_mono_24_0x53>:
 8003000:	2fd0 0800 000c 0019 0008 0000               ./..........

0800300c <image_data_font_fixedsys_mono_24_0x54>:
 800300c:	ffff 80ff fffd 80ff fffd 80ff fffd 80ff     ................
 800301c:	00fc 800f 00fc 800f 00fc 800f fffd 80ff     ................
 800302c:	fffd 80ff fffd 80ff ffff 80ff ffff 80ff     ................

0800303c <font_fixedsys_mono_24_0x54>:
 800303c:	300c 0800 000c 0019 0008 0000               .0..........

08003048 <image_data_font_fixedsys_mono_24_0x55>:
 8003048:	ffff 80ff 00fc 803f 00fc 803f 00fc 800f     ......?...?.....
 8003058:	ffff 80ef ffff 80ef ffff 80ef 00fc 800f     ................
 8003068:	00fc 800f 00fc 803f ffff 80ff ffff 80ff     ......?.........

08003078 <font_fixedsys_mono_24_0x55>:
 8003078:	3048 0800 000c 0019 0008 0000               H0..........

08003084 <image_data_font_fixedsys_mono_24_0x56>:
 8003084:	ffff 80ff 00fc 807f 00fc 807f 00fc 801f     ................
 8003094:	ffff 808f ffff 808f ffff 808f 00fc 803f     ..............?.
 80030a4:	00fc 803f 00fc 807f ffff 80ff ffff 80ff     ..?.............

080030b4 <font_fixedsys_mono_24_0x56>:
 80030b4:	3084 0800 000c 0019 0008 0000               .0..........

080030c0 <image_data_font_fixedsys_mono_24_0x57>:
 80030c0:	ffff 80ff 01fc 80ff 01fc 80ff 00fc 800f     ................
 80030d0:	ffff 800f feff 800f e0ff 80ff ffff 800f     ................
 80030e0:	ffff 800f 00fc 800f 01fc 80ff 01fc 80ff     ................

080030f0 <font_fixedsys_mono_24_0x57>:
 80030f0:	30c0 0800 000c 0019 0008 0000               .0..........

080030fc <image_data_font_fixedsys_mono_24_0x58>:
 80030fc:	ffff 80ff 7ffc 800f 18fc 800f 18fc 800f     ................
 800310c:	87ff 80ff e7ff 80ff e1ff 80ff 18fc 800f     ................
 800311c:	18fc 800f 7ffc 800f ffff 80ff ffff 80ff     ................

0800312c <font_fixedsys_mono_24_0x58>:
 800312c:	30fc 0800 000c 0019 0008 0000               .0..........

08003138 <image_data_font_fixedsys_mono_24_0x59>:
 8003138:	ffff 80ff 0ffc 80ff 0ffc 80ff 03fc 80ff     ................
 8003148:	f0ff 800f f0ff 800f f0ff 800f 03fc 80ff     ................
 8003158:	03fc 80ff 0ffc 80ff ffff 80ff ffff 80ff     ................

08003168 <font_fixedsys_mono_24_0x59>:
 8003168:	3138 0800 000c 0019 0008 0000               81..........

08003174 <image_data_font_fixedsys_mono_24_0x5a>:
 8003174:	ffff 80ff fefd 800f fefd 800f fcfd 800f     ................
 8003184:	f1fd 80ef f1fd 80ef e3fd 80ef 0ffc 80ef     ................
 8003194:	0ffc 80ef 1ffc 80ef ffff 80ff ffff 80ff     ................

080031a4 <font_fixedsys_mono_24_0x5a>:
 80031a4:	3174 0800 000c 0019 0008 0000               t1..........

080031b0 <image_data_font_fixedsys_mono_24_0x5b>:
 80031b0:	ffff 80ff ffff 80ff ffff 80ff 00fc 0000     ................
 80031c0:	00fc 0000 00fc 0000 fffd 00ff fffd 00ff     ................
 80031d0:	fffd 00ff ffff 80ff ffff 80ff ffff 80ff     ................

080031e0 <font_fixedsys_mono_24_0x5b>:
 80031e0:	31b0 0800 000c 0019 0008 0000               .1..........

080031ec <image_data_font_fixedsys_mono_24_0x5c>:
 80031ec:	ffff 80ff 7ffc 80ff 7ffc 80ff 0ffc 80ff     ................
 80031fc:	81ff 80ff 81ff 80ff f0ff 803f feff 8007     ..........?.....
 800320c:	feff 8007 ffff 80c7 ffff 80ff ffff 80ff     ................

0800321c <font_fixedsys_mono_24_0x5c>:
 800321c:	31ec 0800 000c 0019 0008 0000               .1..........

08003228 <image_data_font_fixedsys_mono_24_0x5d>:
 8003228:	ffff 80ff ffff 80ff ffff 80ff fffd 00ff     ................
 8003238:	fffd 00ff fffd 00ff 00fc 0000 00fc 0000     ................
 8003248:	00fc 0000 ffff 80ff ffff 80ff ffff 80ff     ................

08003258 <font_fixedsys_mono_24_0x5d>:
 8003258:	3228 0800 000c 0019 0008 0000               (2..........

08003264 <image_data_font_fixedsys_mono_24_0x5e>:
 8003264:	ffff 80ff fffd 80ff fffd 80ff fff1 80ff     ................
 8003274:	ffc7 80ff ffc7 80ff ffc7 80ff ffe1 80ff     ................
 8003284:	ffe1 80ff fffd 80ff ffff 80ff ffff 80ff     ................

08003294 <font_fixedsys_mono_24_0x5e>:
 8003294:	3264 0800 000c 0019 0008 0000               d2..........

080032a0 <image_data_font_fixedsys_mono_24_0x5f>:
 80032a0:	ffff 80fe ffff 80fe ffff 80fe ffff 80fe     ................
 80032b0:	ffff 80fe ffff 80fe ffff 80fe ffff 80fe     ................
 80032c0:	ffff 80fe ffff 80fe ffff 80fe ffff 80fe     ................

080032d0 <font_fixedsys_mono_24_0x5f>:
 80032d0:	32a0 0800 000c 0019 0008 0000               .2..........

080032dc <image_data_font_fixedsys_mono_24_0x60>:
 80032dc:	ffff 80ff ffff 80ff ffef 80ff ffef 80ff     ................
 80032ec:	ffe3 80ff ffe3 80ff ffe1 80ff fffd 80ff     ................
 80032fc:	fffd 80ff ffff 80ff ffff 80ff ffff 80ff     ................

0800330c <font_fixedsys_mono_24_0x60>:
 800330c:	32dc 0800 000c 0019 0008 0000               .2..........

08003318 <image_data_font_fixedsys_mono_24_0x61>:
 8003318:	ffff 80ff feff 803f feff 803f bcff 800f     ......?...?.....
 8003328:	bdff 80ef bdff 80ef bdff 80ef 80ff 800f     ................
 8003338:	80ff 800f c0ff 800f ffff 80ff ffff 80ff     ................

08003348 <font_fixedsys_mono_24_0x61>:
 8003348:	3318 0800 000c 0019 0008 0000               .3..........

08003354 <image_data_font_fixedsys_mono_24_0x62>:
 8003354:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8003364:	bfff 80ef bfff 80ef bfff 80ef 80ff 800f     ................
 8003374:	80ff 800f e0ff 801f ffff 80ff ffff 80ff     ................

08003384 <font_fixedsys_mono_24_0x62>:
 8003384:	3354 0800 000c 0019 0008 0000               T3..........

08003390 <image_data_font_fixedsys_mono_24_0x63>:
 8003390:	ffff 80ff e0ff 803f e0ff 803f 80ff 800f     ......?...?.....
 80033a0:	bfff 80ef bfff 80ef bfff 80ef 8fff 808f     ................
 80033b0:	8fff 808f efff 80bf ffff 80ff ffff 80ff     ................

080033c0 <font_fixedsys_mono_24_0x63>:
 80033c0:	3390 0800 000c 0019 0008 0000               .3..........

080033cc <image_data_font_fixedsys_mono_24_0x64>:
 80033cc:	ffff 80ff e0ff 801f 80ff 800f 80ff 800f     ................
 80033dc:	bfff 80ef bfff 80ef bfff 80ef 00fc 800f     ................
 80033ec:	00fc 800f 00fc 800f ffff 80ff ffff 80ff     ................

080033fc <font_fixedsys_mono_24_0x64>:
 80033fc:	33cc 0800 000c 0019 0008 0000               .3..........

08003408 <image_data_font_fixedsys_mono_24_0x65>:
 8003408:	ffff 80ff e0ff 801f e0ff 801f 80ff 800f     ................
 8003418:	bdff 80ef bdff 80ef bdff 80ef 81ff 80ef     ................
 8003428:	81ff 80ef e1ff 80ff ffff 80ff ffff 80ff     ................

08003438 <font_fixedsys_mono_24_0x65>:
 8003438:	3408 0800 000c 0019 0008 0000               .4..........

08003444 <image_data_font_fixedsys_mono_24_0x66>:
 8003444:	ffff 80ff f7ff 80ff f7ff 80ff 00ff 800f     ................
 8003454:	00fc 800f 00fc 800f f7fd 80ff f7fd 80ff     ................
 8003464:	f7fd 80ff f7fd 80ff ffff 80ff ffff 80ff     ................

08003474 <font_fixedsys_mono_24_0x66>:
 8003474:	3444 0800 000c 0019 0008 0000               D4..........

08003480 <image_data_font_fixedsys_mono_24_0x67>:
 8003480:	ffff 80ff e0ff 001f 80ff 000f 80ff 000f     ................
 8003490:	bfff 00ef bfff 00ef bfff 00ef 80ff 0000     ................
 80034a0:	80ff 0000 80ff 8000 ffff 80ff ffff 80ff     ................

080034b0 <font_fixedsys_mono_24_0x67>:
 80034b0:	3480 0800 000c 0019 0008 0000               .4..........

080034bc <image_data_font_fixedsys_mono_24_0x68>:
 80034bc:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 80034cc:	bfff 80ff bfff 80ff bfff 80ff 80ff 800f     ................
 80034dc:	80ff 800f e0ff 800f ffff 80ff ffff 80ff     ................

080034ec <font_fixedsys_mono_24_0x68>:
 80034ec:	34bc 0800 000c 0019 0008 0000               .4..........

080034f8 <image_data_font_fixedsys_mono_24_0x69>:
 80034f8:	ffff 80ff bfff 80ef bfff 80ef bfff 80ef     ................
 8003508:	80f1 800f 80f1 800f 80f1 800f ffff 80ef     ................
 8003518:	ffff 80ef ffff 80ef ffff 80ff ffff 80ff     ................

08003528 <font_fixedsys_mono_24_0x69>:
 8003528:	34f8 0800 000c 0019 0008 0000               .4..........

08003534 <image_data_font_fixedsys_mono_24_0x6a>:
 8003534:	ffff 80ff ffff 00ff ffff 00ff bfff 00ff     ................
 8003544:	bfff 00ff bfff 00ff 80f8 0000 80f8 8000     ................
 8003554:	80f8 8000 ffff 80ff ffff 80ff ffff 80ff     ................

08003564 <font_fixedsys_mono_24_0x6a>:
 8003564:	3534 0800 000c 0019 0008 0000               45..........

08003570 <image_data_font_fixedsys_mono_24_0x6b>:
 8003570:	ffff 80ff 00fc 800f 00fc 800f 00fc 800f     ................
 8003580:	fdff 80ff fdff 80ff f0ff 80ff 82ff 800f     ................
 8003590:	82ff 800f 8fff 808f ffff 80ff ffff 80ff     ................

080035a0 <font_fixedsys_mono_24_0x6b>:
 80035a0:	3570 0800 000c 0019 0008 0000               p5..........

080035ac <image_data_font_fixedsys_mono_24_0x6c>:
 80035ac:	ffff 80ff fffd 80ef fffd 80ef fffd 80ef     ................
 80035bc:	00fc 800f 00fc 800f 00fc 800f ffff 80ef     ................
 80035cc:	ffff 80ef ffff 80ef ffff 80ff ffff 80ff     ................

080035dc <font_fixedsys_mono_24_0x6c>:
 80035dc:	35ac 0800 000c 0019 0008 0000               .5..........

080035e8 <image_data_font_fixedsys_mono_24_0x6d>:
 80035e8:	ffff 80ff 80ff 800f 80ff 800f 80ff 800f     ................
 80035f8:	bfff 80ff 80ff 801f 80ff 801f bfff 80ff     ................
 8003608:	bfff 80ff 80ff 800f 80ff 800f e0ff 800f     ................

08003618 <font_fixedsys_mono_24_0x6d>:
 8003618:	35e8 0800 000c 0019 0008 0000               .5..........

08003624 <image_data_font_fixedsys_mono_24_0x6e>:
 8003624:	ffff 80ff 80ff 800f 80ff 800f 80ff 800f     ................
 8003634:	bfff 80ff bfff 80ff bfff 80ff 80ff 800f     ................
 8003644:	80ff 800f e0ff 800f ffff 80ff ffff 80ff     ................

08003654 <font_fixedsys_mono_24_0x6e>:
 8003654:	3624 0800 000c 0019 0008 0000               $6..........

08003660 <image_data_font_fixedsys_mono_24_0x6f>:
 8003660:	ffff 80ff e0ff 801f e0ff 801f 80ff 800f     ................
 8003670:	bfff 80ef bfff 80ef bfff 80ef 80ff 800f     ................
 8003680:	80ff 800f e0ff 801f ffff 80ff ffff 80ff     ................

08003690 <font_fixedsys_mono_24_0x6f>:
 8003690:	3660 0800 000c 0019 0008 0000               `6..........

0800369c <image_data_font_fixedsys_mono_24_0x70>:
 800369c:	ffff 80ff 80ff 0000 80ff 0000 80ff 0000     ................
 80036ac:	bfff 80ef bfff 80ef bfff 80ef 80ff 800f     ................
 80036bc:	80ff 800f e0ff 801f ffff 80ff ffff 80ff     ................

080036cc <font_fixedsys_mono_24_0x70>:
 80036cc:	369c 0800 000c 0019 0008 0000               .6..........

080036d8 <image_data_font_fixedsys_mono_24_0x71>:
 80036d8:	ffff 80ff e0ff 801f 80ff 800f 80ff 800f     ................
 80036e8:	bfff 80ef bfff 80ef bfff 80ef 80ff 0000     ................
 80036f8:	80ff 0000 80ff 0000 ffff 80ff ffff 80ff     ................

08003708 <font_fixedsys_mono_24_0x71>:
 8003708:	36d8 0800 000c 0019 0008 0000               .6..........

08003714 <image_data_font_fixedsys_mono_24_0x72>:
 8003714:	ffff 80ff 80ff 800f 80ff 800f 80ff 800f     ................
 8003724:	f7ff 80ff e7ff 80ff efff 80ff 8fff 80ff     ................
 8003734:	8fff 80ff 8fff 80ff ffff 80ff ffff 80ff     ................

08003744 <font_fixedsys_mono_24_0x72>:
 8003744:	3714 0800 000c 0019 0008 0000               .7..........

08003750 <image_data_font_fixedsys_mono_24_0x73>:
 8003750:	ffff 80ff e3ff 80ef e3ff 80ef 81ff 80ef     ................
 8003760:	bdff 80ef bdff 80ef bdff 80ef bcff 800f     ................
 8003770:	bcff 800f beff 803f ffff 80ff ffff 80ff     ......?.........

08003780 <font_fixedsys_mono_24_0x73>:
 8003780:	3750 0800 000c 0019 0008 0000               P7..........

0800378c <image_data_font_fixedsys_mono_24_0x74>:
 800378c:	ffff 80ff bfff 80ff bfff 80ff 00fc 803f     ..............?.
 800379c:	00fc 800f 00fc 800f bfff 80ef bfff 80ef     ................
 80037ac:	bfff 80ef bfff 80ef ffff 80ff ffff 80ff     ................

080037bc <font_fixedsys_mono_24_0x74>:
 80037bc:	378c 0800 000c 0019 0008 0000               .7..........

080037c8 <image_data_font_fixedsys_mono_24_0x75>:
 80037c8:	ffff 80ff 80ff 803f 80ff 800f 80ff 800f     ......?.........
 80037d8:	ffff 80ef ffff 80ef ffff 80ef 80ff 800f     ................
 80037e8:	80ff 800f 80ff 800f ffff 80ff ffff 80ff     ................

080037f8 <font_fixedsys_mono_24_0x75>:
 80037f8:	37c8 0800 000c 0019 0008 0000               .7..........

08003804 <image_data_font_fixedsys_mono_24_0x76>:
 8003804:	ffff 80ff 80ff 807f 80ff 807f 80ff 801f     ................
 8003814:	ffff 808f ffff 808f ffff 808f 80ff 803f     ..............?.
 8003824:	80ff 803f 80ff 807f ffff 80ff ffff 80ff     ..?.............

08003834 <font_fixedsys_mono_24_0x76>:
 8003834:	3804 0800 000c 0019 0008 0000               .8..........

08003840 <image_data_font_fixedsys_mono_24_0x77>:
 8003840:	ffff 80ff 80ff 807f 80ff 807f 80ff 800f     ................
 8003850:	ffff 808f ffff 808f e0ff 807f ffff 808f     ................
 8003860:	ffff 808f 80ff 800f 80ff 807f 80ff 807f     ................

08003870 <font_fixedsys_mono_24_0x77>:
 8003870:	3840 0800 000c 0019 0008 0000               @8..........

0800387c <image_data_font_fixedsys_mono_24_0x78>:
 800387c:	ffff 80ff 8fff 808f 8fff 808f 86ff 800f     ................
 800388c:	f0ff 80ff f0ff 80ff f0ff 80ff 86ff 800f     ................
 800389c:	86ff 800f 8fff 808f ffff 80ff ffff 80ff     ................

080038ac <font_fixedsys_mono_24_0x78>:
 80038ac:	387c 0800 000c 0019 0008 0000               |8..........

080038b8 <image_data_font_fixedsys_mono_24_0x79>:
 80038b8:	ffff 00ff ffff 00ff 80ff 003f 80ff 000f     ..........?.....
 80038c8:	80ff 000f ffff 00ec ffff 80e0 ffff 80e0     ................
 80038d8:	80ff 8003 80ff 803f 80ff 803f ffff 80ff     ......?...?.....

080038e8 <font_fixedsys_mono_24_0x79>:
 80038e8:	38b8 0800 000c 0019 0008 0000               .8..........

080038f4 <image_data_font_fixedsys_mono_24_0x7a>:
 80038f4:	ffff 80ff bfff 808f bfff 808f beff 800f     ................
 8003904:	bcff 806f bcff 806f b1ff 80ef 83ff 80ef     ..o...o.........
 8003914:	83ff 80ef 8fff 80ef ffff 80ff ffff 80ff     ................

08003924 <font_fixedsys_mono_24_0x7a>:
 8003924:	38f4 0800 000c 0019 0008 0000               .8..........

08003930 <image_data_font_fixedsys_mono_24_0x7b>:
 8003930:	ffff 80ff fdff 80ff fdff 80ff f0ff 80ff     ................
 8003940:	06fe 8007 06fe 8007 0ffc 8003 fffd 80fb     ................
 8003950:	fffd 80fb ffff 80ff ffff 80ff ffff 80ff     ................

08003960 <font_fixedsys_mono_24_0x7b>:
 8003960:	3930 0800 000c 0019 0008 0000               09..........

0800396c <image_data_font_fixedsys_mono_24_0x7c>:
 800396c:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................
 800397c:	00fc 0000 00fc 0000 00fc 0000 ffff 80ff     ................
 800398c:	ffff 80ff ffff 80ff ffff 80ff ffff 80ff     ................

0800399c <font_fixedsys_mono_24_0x7c>:
 800399c:	396c 0800 000c 0019 0008 0000               l9..........

080039a8 <image_data_font_fixedsys_mono_24_0x7d>:
 80039a8:	ffff 80ff ffff 80ff ffff 80ff fffd 80fb     ................
 80039b8:	fffd 80fb 0ffc 8003 06fe 8007 06fe 8007     ................
 80039c8:	f0ff 80ff fdff 80ff fdff 80ff ffff 80ff     ................

080039d8 <font_fixedsys_mono_24_0x7d>:
 80039d8:	39a8 0800 000c 0019 0008 0000               .9..........

080039e4 <image_data_font_fixedsys_mono_24_0x7e>:
 80039e4:	3ffe 80ff 3ffe 80ff fff8 80ff fff8 80ff     .?...?..........
 80039f4:	fffb 80ff 3ff8 80ff 3ffe 80ff 3ffe 80ff     .....?...?...?..
 8003a04:	bfff 80ff 3ffe 80ff fffc 80ff ffff 80ff     .....?..........

08003a14 <font_fixedsys_mono_24_0x7e>:
 8003a14:	39e4 0800 000c 0019 0008 0000               .9..........

08003a20 <font_fixedsys_mono_24_array>:
 8003a20:	0020 0000 240c 0800 0021 0000 2448 0800      ....$..!...H$..
 8003a30:	0022 0000 2484 0800 0023 0000 24c0 0800     "....$..#....$..
 8003a40:	0024 0000 24fc 0800 0025 0000 2538 0800     $....$..%...8%..
 8003a50:	0026 0000 2574 0800 0027 0000 25b0 0800     &...t%..'....%..
 8003a60:	0028 0000 25ec 0800 0029 0000 2628 0800     (....%..)...(&..
 8003a70:	002a 0000 2664 0800 002b 0000 26a0 0800     *...d&..+....&..
 8003a80:	002c 0000 26dc 0800 002d 0000 2718 0800     ,....&..-....'..
 8003a90:	002e 0000 2754 0800 002f 0000 2790 0800     ....T'../....'..
 8003aa0:	0030 0000 27cc 0800 0031 0000 2808 0800     0....'..1....(..
 8003ab0:	0032 0000 2844 0800 0033 0000 2880 0800     2...D(..3....(..
 8003ac0:	0034 0000 28bc 0800 0035 0000 28f8 0800     4....(..5....(..
 8003ad0:	0036 0000 2934 0800 0037 0000 2970 0800     6...4)..7...p)..
 8003ae0:	0038 0000 29ac 0800 0039 0000 29e8 0800     8....)..9....)..
 8003af0:	003a 0000 2a24 0800 003b 0000 2a60 0800     :...$*..;...`*..
 8003b00:	003c 0000 2a9c 0800 003d 0000 2ad8 0800     <....*..=....*..
 8003b10:	003e 0000 2b14 0800 003f 0000 2b50 0800     >....+..?...P+..
 8003b20:	0040 0000 2b8c 0800 0041 0000 2bc8 0800     @....+..A....+..
 8003b30:	0042 0000 2c04 0800 0043 0000 2c40 0800     B....,..C...@,..
 8003b40:	0044 0000 2c7c 0800 0045 0000 2cb8 0800     D...|,..E....,..
 8003b50:	0046 0000 2cf4 0800 0047 0000 2d30 0800     F....,..G...0-..
 8003b60:	0048 0000 2d6c 0800 0049 0000 2da8 0800     H...l-..I....-..
 8003b70:	004a 0000 2de4 0800 004b 0000 2e20 0800     J....-..K... ...
 8003b80:	004c 0000 2e5c 0800 004d 0000 2e98 0800     L...\...M.......
 8003b90:	004e 0000 2ed4 0800 004f 0000 2f10 0800     N.......O..../..
 8003ba0:	0050 0000 2f4c 0800 0051 0000 2f88 0800     P...L/..Q..../..
 8003bb0:	0052 0000 2fc4 0800 0053 0000 3000 0800     R..../..S....0..
 8003bc0:	0054 0000 303c 0800 0055 0000 3078 0800     T...<0..U...x0..
 8003bd0:	0056 0000 30b4 0800 0057 0000 30f0 0800     V....0..W....0..
 8003be0:	0058 0000 312c 0800 0059 0000 3168 0800     X...,1..Y...h1..
 8003bf0:	005a 0000 31a4 0800 005b 0000 31e0 0800     Z....1..[....1..
 8003c00:	005c 0000 321c 0800 005d 0000 3258 0800     \....2..]...X2..
 8003c10:	005e 0000 3294 0800 005f 0000 32d0 0800     ^....2.._....2..
 8003c20:	0060 0000 330c 0800 0061 0000 3348 0800     `....3..a...H3..
 8003c30:	0062 0000 3384 0800 0063 0000 33c0 0800     b....3..c....3..
 8003c40:	0064 0000 33fc 0800 0065 0000 3438 0800     d....3..e...84..
 8003c50:	0066 0000 3474 0800 0067 0000 34b0 0800     f...t4..g....4..
 8003c60:	0068 0000 34ec 0800 0069 0000 3528 0800     h....4..i...(5..
 8003c70:	006a 0000 3564 0800 006b 0000 35a0 0800     j...d5..k....5..
 8003c80:	006c 0000 35dc 0800 006d 0000 3618 0800     l....5..m....6..
 8003c90:	006e 0000 3654 0800 006f 0000 3690 0800     n...T6..o....6..
 8003ca0:	0070 0000 36cc 0800 0071 0000 3708 0800     p....6..q....7..
 8003cb0:	0072 0000 3744 0800 0073 0000 3780 0800     r...D7..s....7..
 8003cc0:	0074 0000 37bc 0800 0075 0000 37f8 0800     t....7..u....7..
 8003cd0:	0076 0000 3834 0800 0077 0000 3870 0800     v...48..w...p8..
 8003ce0:	0078 0000 38ac 0800 0079 0000 38e8 0800     x....8..y....8..
 8003cf0:	007a 0000 3924 0800 007b 0000 3960 0800     z...$9..{...`9..
 8003d00:	007c 0000 399c 0800 007d 0000 39d8 0800     |....9..}....9..
 8003d10:	007e 0000 3a14 0800                         ~....:..

08003d18 <font_fixedsys_mono_24>:
 8003d18:	005f 0000 3a20 0800 6954 796e 4d20 6e6f     _... :..Tiny Mon
 8003d28:	7469 726f 7620 2e31 0030 0000 6f43 6e6e     itor v1.0...Conn
 8003d38:	6365 2074 5355 2e42 2e2e 0000 5355 2042     ect USB.....USB 
 8003d48:	6f63 6e6e 6365 6574 2e64 4320 6e6f 6966     connected. Confi
 8003d58:	2067 7369 7320 7465 2e2e 002e 6f43 6e6e     g is set....Conn
 8003d68:	6365 6574 2064 6f74 6820 736f 2074 6f73     ected to host so
 8003d78:	7466 6177 6572 2e2e 002e 0000 7554 6f74     ftware......Tuto
 8003d88:	6972 6c61 0000 0000 6944 7073 616c 0079     rial....Display.
 8003d98:	6944 7073 616c 2079 6e49 6574 6672 6361     Display Interfac
 8003da8:	0065 0000                                   e...

08003dac <usb_desc_strings>:
 8003dac:	3d84 0800 3d90 0800 0114 2000 3d98 0800     .=...=..... .=..

08003dbc <comm_endpoint_descs>:
 8003dbc:	0507 0201 0040 0000 0000 0000 0000 0700     ....@...........
 8003dcc:	8205 4001 0100 0000 0000 0000 0000 0000     ...@............

08003ddc <comm_if_descs>:
 8003ddc:	0409 0000 ff02 0000 bc04 003d 0008 0000     ..........=.....
	...

08003df4 <usb_interfaces>:
 8003df4:	0000 0000 0001 0000 0000 0000 3ddc 0800     .............=..

08003e04 <usb_config_descs>:
 8003e04:	0209 0000 0101 8000 f4fa 003d 0008 0000     ..........=.....

08003e14 <usb_device_desc>:
 8003e14:	0112 0200 00ff 4000 cafe ceaf 0061 0201     .......@....a...
 8003e24:	0103 0000                                   ....

08003e28 <HEX_DIGITS>:
 8003e28:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8003e38:	0000 0000                                   ....

08003e3c <st_usbfs_v1_usb_driver>:
 8003e3c:	1da9 0800 1eb1 0800 1f01 0800 2025 0800     ............% ..
 8003e4c:	2069 0800 2161 0800 2129 0800 219d 0800     i ..a!..)!...!..
 8003e5c:	221d 0800 22c9 0800 0000 0000 0000 0000     ."..."..........
 8003e6c:	0000 0000                                   ....
